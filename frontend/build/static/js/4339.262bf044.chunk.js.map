{"version":3,"file":"static/js/4339.262bf044.chunk.js","mappings":"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","sources":["App/globalFunctions.js","Components/Checkbox/Checkbox.js","Components/Checkbox/ProductCheckBox.js","Components/Inputs/TableInput.js","Components/RegularExpressions/RegularExpressions.js","Components/SelectInput/CustomStyle.js","Components/SelectInput/SelectInput.js","Components/Buttons/TableBtn.js","Components/Table/TableRows/PackmanTableRow.js","Components/Table/TableRows/SellerTableRow.js","Components/Table/TableRows/CategoryTableRow.js","Components/Table/TableRows/RegisterIncomingTableRow.js","Components/Table/TableIcons/StatusIcon.js","Components/Table/TableRows/InventoriesTableRow.js","Components/Table/TableRows/InventoryTableRow.js","Components/Table/TableRows/ProductReportTableRow.js","Components/Table/TableRows/ProductTableRow.js","Components/Table/TableRows/SupplierTableRow.js","Components/Table/TableRows/UnitTableRow.js","Components/Table/Thead.js","Components/Table/TableRows/IncomingsTableRow.js","Components/Table/TableRows/RegisterSaleTableRow.js","Components/Table/TableRows/TemporaryIncomingsTableRow.js","Components/Table/TableRows/TemporarySaleTableRow.js","Components/Table/TableRows/SalesListTableRow.js","Components/Table/TableRows/ClientTableRow.js","Components/Table/TableRows/ExchangenerateTableRow.js","Components/Table/TableRows/SaleReturnTableRow.js","Components/Table/TableRows/CashierSaleTableRow.js","Components/Table/TableRows/PaymentsTableRow.js","Components/Table/TableRows/IncomeTableRow.js","Components/Table/TableRows/DebtsTableRow.js","Components/Table/TableRows/DiscountTableRow.js","Components/Table/TableRows/ExpensesTableRow.js","Components/Table/TableRows/BarcodeTableRow.js","Components/Table/TableRows/AdminProductTableRow.js","Components/Table/TableRows/ReturnProductsTableRow.js","Components/Table/TableRows/GeneralReportTableRow.js","Components/Table/TableFooters/RegisterSaleTableFooter.js","Components/Table/TableRows/FilialShopTableRow.js","Components/Table/TableRows/DailyReport.js","Components/Table/TableRows/SupplierIncomingsTableRow.js","Components/Table/TableRows/FilialShopDataIdTablerow.js","Components/Table/TableRows/CategoryReportTableRow.js","Components/Table/TableRows/MarketProductsTableRow.js","Components/Table/TableRows/PartnerProductsTableRow.js","Components/SelectTable/CustomStyle.js","Components/SelectTable/SelectTable.js","Components/Table/TableRows/RegisterOrdersTableRow.js","Components/Table/TableRows/OrderProductsTableRow.js","Components/Table/TableRows/SavedOrdersTableRow.js","Components/Table/TableRows/RegisterIncomingOrdersTableRow.js","Components/Table/TableRows/IncomingOrderProductsTableRow.js","Components/Table/TableRows/ReceiveOrderProductsTableRow.js","Components/Table/TableRows/LabelsIncome.js","Components/Table/TableRows/PaymentsSellingTable.js","Components/Table/Table.js"],"sourcesContent":["import {regexForEmptyString} from '../Components/RegularExpressions/RegularExpressions.js'\r\nimport {orderBy, reduce} from 'lodash'\r\nimport * as XLSX from 'xlsx'\r\n\r\nexport const universalSort = (data, setData, key, sort, prevData) => {\r\n    const keys = key.split('.')\r\n    const result = sort\r\n        ? orderBy(\r\n            [...data],\r\n            (item) => {\r\n                return keys.length === 3\r\n                    ? item[keys[0]][keys[1]][keys[2]]\r\n                    : keys.length === 2\r\n                        ? item[keys[0]][keys[1]]\r\n                        : item[key]\r\n            },\r\n            [sort === -1 ? 'desc' : 'asc']\r\n        )\r\n        : prevData\r\n    setData(result)\r\n}\r\nexport const UsdToUzs = (val, currency) => Math.round(val * currency)\r\n\r\nexport const UzsToUsd = (val, currency) =>\r\n    Math.round((val / currency) * 10000) / 10000\r\n\r\n// check empty string\r\nexport const checkEmptyString = (values) => {\r\n    let result = {failed: false, message: ''}\r\n    for (let i = 0; i < values.length; i++) {\r\n        if (regexForEmptyString.test(values[i].value)) {\r\n            result = {\r\n                message: values[i].message,\r\n                failed: true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    return result\r\n}\r\n// export excel\r\nexport const exportExcel = (data, fileName, headers) => {\r\n    const autoFillColumnWidth = (json) => {\r\n        const cols = Object.keys(json[0])\r\n        return cols.map((key, index) => {\r\n            let maxLength = Math.max(\r\n                ...json.map((x) => x[key].toString().length)\r\n            )\r\n            return {\r\n                wch:\r\n                    headers[index].length > maxLength\r\n                        ? headers[index].length + 1\r\n                        : maxLength + 4\r\n            }\r\n        })\r\n    }\r\n    const wscols = autoFillColumnWidth(data)\r\n    const wb = XLSX.utils.book_new()\r\n    const ws = XLSX.utils.json_to_sheet([])\r\n    ws['!cols'] = wscols\r\n    XLSX.utils.sheet_add_aoa(ws, [headers])\r\n    XLSX.utils.sheet_add_json(ws, data, {\r\n        origin: 'A2',\r\n        skipHeader: true\r\n    })\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Maxsulotlar')\r\n    XLSX.writeFile(wb, `${fileName}-${new Date().toLocaleDateString()}.xlsx`)\r\n}\r\n\r\n// round UZS||USD\r\nexport const roundUzs = (val) => Math.round(val * 1) / 1\r\n\r\nexport const roundUsd = (val) => Math.round(val * 10000) / 10000\r\n\r\n// reduce\r\nexport const reduceSumm = (arr, key) =>\r\n    reduce(arr, (prev, current) => prev + current[key], 0)\r\n\r\n// current Exchange\r\nexport const currentExchangerate = (uzs, usd) => roundUzs(uzs / usd)\r\n","import {IoCheckmark} from 'react-icons/io5'\r\n\r\nfunction Checkbox({onChange, value, label, id}) {\r\n    return (\r\n        <div className={'checkbox'}>\r\n            <input type='checkbox' className={'hidden'} id={id} onChange={onChange} checked={value} />\r\n            <label htmlFor={id}>\r\n                <span className={'checkbox-icon'}><IoCheckmark size={'1rem'} /></span>\r\n            </label>\r\n            <span className={'checkbox-label'}>{label}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox","import React from 'react'\r\n\r\nconst ProductCheckbox = ({value, onChange}) => {\r\n    return (\r\n        <div className={'checkbox-card sale-toggle-container'}>\r\n            <input\r\n                className={'cursor-pointer'}\r\n                type='checkbox'\r\n                checked={value}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductCheckbox\r\n","function TableInput({\r\n                        placeholder,\r\n                        type,\r\n                        value,\r\n                        onChange,\r\n                        label,\r\n                        disabled,\r\n                        onKeyUp\r\n                    }) {\r\n    return (\r\n        <div className={'w-full'}>\r\n            <label>\r\n                {label}\r\n                <input\r\n                    disabled={disabled}\r\n                    className='tableInput'\r\n                    placeholder={placeholder}\r\n                    type={type}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    onKeyUp={onKeyUp}\r\n                    onWheel={(e) => e.target.blur()}\r\n                    min={0}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableInput\r\n","export const regexForTypeNumber = /^\\d*\\.?\\d*$/\r\nexport const regexForEmptyString = /^\\s*$/","import React from 'react'\r\nimport {components} from 'react-select'\r\nimport {IoCaretDown} from 'react-icons/io5'\r\n\r\nexport const DropdownIcon = (props) => {\r\n    return (\r\n        <components.DropdownIndicator {...props}>\r\n            <IoCaretDown size={'0.625rem'} color={'#86A7E9'} />\r\n        </components.DropdownIndicator>\r\n    )\r\n}\r\n\r\nconst DropdownIndicator = (styles, {isFocused}) => ({\r\n    ...styles,\r\n    padding: 0,\r\n    paddingRight: '.625rem',\r\n    color: isFocused ? '#193F8A' : '#071F45'\r\n})\r\nconst Menu = (styles) => ({\r\n    ...styles,\r\n    zIndex: 30\r\n})\r\nconst Option = (styles, {isFocused, isSelected}) => ({\r\n    ...styles,\r\n    fontSize: '.875rem',\r\n    fontWeight: '400',\r\n    color: isSelected || isFocused ? '#ffffff' : '#071F45',\r\n    backgroundColor: isSelected ? '#0090A3' : isFocused ? '#00B4CC' : '#ffffff',\r\n    transition: 'all 0.2s ease',\r\n    overflow: 'hidden',\r\n    cursor: 'pointer'\r\n})\r\nconst SingleValue = (styles) => ({\r\n    ...styles,\r\n    color: '#1c1c1c',\r\n    fontSize: '.875rem',\r\n    lineHeight: '1.25rem',\r\n    fontWeight: '400',\r\n    margin: 0\r\n})\r\nconst ValueContainer = (styles) => ({\r\n    ...styles,\r\n    padding: 0\r\n})\r\n\r\nconst Placeholder = (styles, {isDisabled}) => ({\r\n    ...styles,\r\n    margin: 0,\r\n    color: isDisabled ? 'rgba(28, 28, 28, 0.2)' : '#86A7E9'\r\n})\r\nconst Control = (styles, {isDisabled}) => ({\r\n    ...styles,\r\n    width: '100%',\r\n    height: '100%',\r\n    padding: '.625rem .58rem',\r\n    borderRadius: '.25rem',\r\n    fontSize: '.875rem',\r\n    fontWeight: '400',\r\n    color: '#86A7E9',\r\n    outline: 'none',\r\n    boxShadow: '0px 10px 10px rgba(0, 0, 0, 0.05)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        backgroundColor: '#EAEAEA'\r\n    },\r\n    '&:focus-within': {\r\n        outline: '4px solid #A9C0EF',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    backgroundColor: isDisabled ? 'rgba(28, 28, 28, 0.2)' : '#fff',\r\n    border: isDisabled ? 'none' : '1px solid #86A7E9'\r\n})\r\n\r\nconst inputStyles = (styles) => ({\r\n    ...styles,\r\n    padding: 0,\r\n    display: 'flex',\r\n    lineHeight: '1.25rem',\r\n    margin: 0\r\n})\r\n\r\nconst CustomStyle = {\r\n    container: (styles) => ({\r\n        ...styles,\r\n        height: '100%'\r\n    }),\r\n    control: Control,\r\n    option: Option,\r\n    menu: Menu,\r\n    singleValue: SingleValue,\r\n    valueContainer: ValueContainer,\r\n    dropdownIndicator: DropdownIndicator,\r\n    placeholder: Placeholder,\r\n    input: inputStyles\r\n}\r\n\r\nexport default CustomStyle\r\n","import React from 'react'\r\nimport Select from 'react-select'\r\nimport CustomStyle, {DropdownIcon} from './CustomStyle'\r\n\r\nconst SelectInput = ({\r\n    onSelect,\r\n    options,\r\n    isDisabled,\r\n    label,\r\n    placeholder,\r\n    value,\r\n}) => {\r\n    return (\r\n        <div className='grow'>\r\n            {label && (\r\n                <label\r\n                    className={\r\n                        'text-blue-700 block leading-[1.125rem] mb-[.625rem]'\r\n                    }\r\n                >\r\n                    {label}\r\n                </label>\r\n            )}\r\n            <Select\r\n                onChange={onSelect}\r\n                styles={CustomStyle}\r\n                value={value}\r\n                defaultValue={''}\r\n                options={options}\r\n                isDisabled={isDisabled}\r\n                placeholder={placeholder}\r\n                components={{\r\n                    IndicatorSeparator: () => null,\r\n                    DropdownIndicator: DropdownIcon,\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectInput\r\n","import React from 'react'\r\nimport {\r\n    IoAdd,\r\n    IoCreateOutline,\r\n    IoDocument,\r\n    IoInformation,\r\n    IoPrint,\r\n    IoSave,\r\n    IoSwapHorizontal,\r\n    IoTrashOutline,\r\n} from 'react-icons/io5'\r\nimport {SiMicrosoftexcel} from 'react-icons/si'\r\nimport {FaMoneyBill} from 'react-icons/fa'\r\n\r\nconst TableBtn = ({type, onClick, bgcolor, isDisabled}) => {\r\n    const chooseIcon = () => {\r\n        switch (type) {\r\n            case 'delete':\r\n                return <IoTrashOutline color='white' size={14} />\r\n            case 'edit':\r\n                return <IoCreateOutline color='white' size={14} />\r\n            case 'print':\r\n                return <IoPrint color='white' size={14} />\r\n            case 'save':\r\n                return <IoSave color='white' size={14} />\r\n            case 'excel':\r\n                return <SiMicrosoftexcel color='white' size={14} />\r\n            case 'add':\r\n                return <IoAdd color='white' size={14} />\r\n            case 'return':\r\n                return <IoSwapHorizontal color='white' size={14} />\r\n            case 'pay':\r\n                return <FaMoneyBill color='white' size={14} />\r\n            case 'info':\r\n                return <IoInformation color='white' size={14} />\r\n            case 'report':\r\n                return <IoDocument color='white' size={14} />\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`w-[24px] h-[24px] flex justify-center items-center rounded-full ${bgcolor}`}\r\n            onClick={onClick}\r\n            disabled={isDisabled}\r\n        >\r\n            {chooseIcon()}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TableBtn\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {uniqueId,map} from 'lodash'\r\n\r\nexport const PackmanTableRow = ({\r\n                                    data,\r\n                                    currentPage,\r\n                                    countPage,\r\n                                    Edit,\r\n                                    Delete\r\n                                }) => {\r\n    return (\r\n        <>\r\n            {map(data,(packman, index) => (\r\n                <tr className='tr' key={uniqueId('card')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-left td'>{packman.name}</td>\r\n                    <td className='py-[0.375rem] td border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => Edit(packman)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(packman)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {uniqueId, map} from 'lodash'\r\nimport {roundUsd, roundUzs} from '../../../App/globalFunctions'\r\n\r\nexport const SellerTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    Edit,\r\n    linkToSellerReports,\r\n    currency,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (seller, index) => (\r\n                <tr className='tr' key={uniqueId('filial')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + index + 1}\r\n                    </td>\r\n                    <td className='text-right td'>{seller.firstname}</td>\r\n                    <td className='text-left td'>{seller.lastname}</td>\r\n                    <td className='text-right td'>{seller.phone}</td>\r\n                    <td className='text-right td'>{seller?.sales || 0}</td>\r\n                    <td className='text-right td'>\r\n                        {currency === 'USD'\r\n                            ? seller?.totalsales?.toLocaleString('ru-RU')\r\n                            : seller?.totalsalesuzs?.toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {currency === 'USD'\r\n                            ? roundUsd(seller?.profit).toLocaleString('ru-RU')\r\n                            : roundUzs(seller?.profituzs).toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='border-r-0 td py-[0.375rem]'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => Edit(seller)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'info'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => linkToSellerReports(seller._id)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport { map } from 'lodash'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport { roundUsd, roundUzs } from '../../../App/globalFunctions'\r\n\r\nexport const CategoryTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    Edit,\r\n    Delete,\r\n    startDate, \r\n    endDate\r\n}) => {\r\n    const navigate = useNavigate()\r\n    const { currencyType } = useSelector((state) => state.currency)\r\n    return (\r\n        <>\r\n            {map(data, (category, index) => (\r\n                <tr key={category._id} className='tr'>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td'>{category.code}</td>\r\n                    <td className='td'>{category.name}</td>\r\n                    <td className='td'>{category?.totalproducts}</td>\r\n                    <td className='td'>{currencyType === 'USD' ? roundUsd(category?.totalsales).toLocaleString('ru-RU') : roundUzs(category?.totalsalesuzs).toLocaleString('ru-RU')} {currencyType}</td>\r\n                    <td className='td'>{currencyType === 'USD' ? roundUsd(category?.profit).toLocaleString('ru-RU') : roundUzs(category?.profituzs).toLocaleString('ru-RU')} {currencyType}</td>\r\n                    <td className='td border-r-0 text-center max-w-[50px] py-[0.375rem]'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'report'}\r\n                                bgcolor='bg-primary-800 mr-2.5'\r\n                                onClick={() => navigate(category.code, {\r\n                                    state: {\r\n                                        id: category._id,\r\n                                        name: category.name,\r\n                                        startDate,\r\n                                        endDate\r\n                                    }\r\n                                })}\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor='bg-warning-500'\r\n                                onClick={() => Edit(category)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor='bg-error-500 ml-2.5'\r\n                                onClick={() => Delete(category)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\nexport const RegisterIncomingTableRow = ({\r\n    changeHandler,\r\n    data,\r\n    Delete,\r\n    currency,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr key={product._id} className='tr'>\r\n                    <td className='py-0 td text-left'>{index + 1}</td>\r\n                    <td className='py-0 td text-right'>\r\n                        {product?.product?.code}\r\n                    </td>\r\n                    <td className='py-0 td text-left'>\r\n                        {product?.product?.name}\r\n                    </td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            onChange={(e) =>\r\n                                changeHandler(e, 'pieces', product._id)\r\n                            }\r\n                            type={'number'}\r\n                            value={product?.pieces}\r\n                        />\r\n                    </td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            onChange={(e) =>\r\n                                changeHandler(e, 'unitprice', product._id)\r\n                            }\r\n                            type={'number'}\r\n                            value={\r\n                                currency === 'USD'\r\n                                    ? product.unitprice\r\n                                    : product.unitpriceuzs\r\n                            }\r\n                        />\r\n                    </td>\r\n                    <td className='py-0 td text-error-500 text-right'>\r\n                        {currency === 'USD'\r\n                            ? product.oldprice.toLocaleString('ru-Ru')\r\n                            : product.oldpriceuzs.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-0 td text-right'>\r\n                        {currency === 'USD'\r\n                            ? product.totalprice.toLocaleString('ru-Ru')\r\n                            : product.totalpriceuzs.toLocaleString(\r\n                                  'ru-Ru'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            onChange={(e) =>\r\n                                changeHandler(e, 'sellingprice', product._id)\r\n                            }\r\n                            type={'number'}\r\n                            value={\r\n                                currency === 'USD'\r\n                                    ? product.sellingprice\r\n                                    : product.sellingpriceuzs\r\n                            }\r\n                        />\r\n                    </td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            onChange={(e) =>\r\n                                changeHandler(e, 'tradeprice', product._id)\r\n                            }\r\n                            type={'number'}\r\n                            value={\r\n                                currency === 'USD'\r\n                                    ? product.tradeprice\r\n                                    : product.tradepriceuzs\r\n                            }\r\n                        />\r\n                    </td>\r\n                    <td className='py-0 td border-r-0'>\r\n                        <div className='flex justify-center items-center'>\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(product)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {IoCheckmark, IoHourglass} from 'react-icons/io5'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const StatusIcon = ({status}) => {\r\n    if (status) {\r\n        return (\r\n            <div className='w-[38px] h-[24px] flex items-center justify-center bg-success-500 rounded-lg'>\r\n                <IoCheckmark color='white' />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <Link\r\n            to={'/maxsulotlar/inventarizatsiya/inventarizatsiya'}\r\n            className='w-[38px] h-[24px] flex items-center justify-center bg-warning-500 rounded-lg'\r\n        >\r\n            <IoHourglass color='white' />\r\n        </Link>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {StatusIcon} from '../TableIcons/StatusIcon'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\n\r\nexport const InventoriesTableRow = ({\r\n                                        data,\r\n                                        currentPage,\r\n                                        countPage,\r\n                                        Print,\r\n                                        Excel,\r\n                                        isDisabled\r\n                                    }) => {\r\n    return (\r\n        <>\r\n            {map(data, (inventory, index) => (\r\n                <tr key={inventory._id} className='tr'>\r\n                    <td className='td text-left'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(inventory.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='td text-right'>{inventory.id}</td>\r\n                    <td className='td text-left'>\r\n                        {inventory.inventories.length}\r\n                    </td>\r\n                    <td className='py-[0.375rem] td text-center'>\r\n                        <div className='flex items justify-center'>\r\n                            <StatusIcon status={inventory.completed} />\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0 text-center max-w-[50px]'>\r\n                        <div className='flex items-center justify-center gap-[5px]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(inventory)}\r\n                            />\r\n                            <TableBtn\r\n                                isDisabled={isDisabled}\r\n                                type={'excel'}\r\n                                bgcolor={'bg-success-500'}\r\n                                onClick={() => Excel(inventory)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\nexport const InventoryTableRow = ({\r\n                                      data,\r\n                                      currentPage,\r\n                                      countPage,\r\n                                      changeHandler,\r\n                                      inputDisabled,\r\n                                      Save,\r\n                                      onKeyUp\r\n                                  }) => {\r\n    return (\r\n        <>\r\n            {map(data,(product, index) => (\r\n                <tr key={product._id} className='tr'>\r\n                    <td className='td text-left'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>{product.category.code}</td>\r\n                    <td className='td text-center'>\r\n                        {product.productdata.code}\r\n                    </td>\r\n                    <td className='td text-left'>{product.productdata.name}</td>\r\n                    <td className='td text-right'>{product.total.toLocaleString('ru-Ru')}</td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            disabled={inputDisabled}\r\n                            onChange={(e) =>\r\n                                changeHandler(e, index, product, 'count')\r\n                            }\r\n                            type={'number'}\r\n                            value={\r\n                                product.inventory.inventorycount &&\r\n                                product.inventory.inventorycount\r\n                            }\r\n                            onKeyUp={(e) => onKeyUp(e, index)}\r\n                        />\r\n                    </td>\r\n                    <td className='td text-error-500 text-right'>\r\n                        {product.inventory && product.inventory.inventorycount\r\n                            ? product.inventory.inventorycount -\r\n                            product.inventory.productcount >\r\n                            0\r\n                                ? '+' +\r\n                                (\r\n                                    Math.round(\r\n                                        (product.inventory.inventorycount -\r\n                                            product.inventory.productcount) *\r\n                                        100\r\n                                    ) / 100\r\n                                ).toLocaleString('ru-RU')\r\n                                : (\r\n                                    Math.round(\r\n                                        (product.inventory.inventorycount -\r\n                                            product.inventory.productcount) *\r\n                                        100\r\n                                    ) / 100\r\n                                ).toLocaleString('ru-RU')\r\n                            : ''}{' '}\r\n                        <span className='text-error-500'>\r\n                            {product.unit.name}\r\n                        </span>\r\n                    </td>\r\n                    <td className='py-1 td'>\r\n                        <TableInput\r\n                            disabled={inputDisabled}\r\n                            onChange={(e) =>\r\n                                changeHandler(e, index, product, 'comment')\r\n                            }\r\n                            type={'text'}\r\n                            value={\r\n                                product.inventory.comment &&\r\n                                product.inventory.comment\r\n                            }\r\n                            onKeyUp={(e) => onKeyUp(e, index)}\r\n                        />\r\n                    </td>\r\n                    <td className='py-0 td'>\r\n                        <div className='flex justify-center items-center'>\r\n                            <TableBtn\r\n                                type={'save'}\r\n                                bgcolor={'bg-success-500'}\r\n                                onClick={() => Save(index)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\n\r\nconst inputVal = (id, printedData) => {\r\n    let hasData = printedData.filter((p) => p.product._id === id)\r\n    return hasData.length > 0 ? hasData[0].numberOfChecks : ''\r\n}\r\n\r\nexport const ProductReportTableRow = ({\r\n    data,\r\n    Print,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    changeHandler,\r\n    printedData,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr className='tr' key={product._id}>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>{product.category.code}</td>\r\n                    <td className={`td`}>{product.productdata.code}</td>\r\n                    <td className={`td`}>{product.productdata.name}</td>\r\n                    <td className={`td text-right`}>\r\n                        <span className='pointer-events-none'>\r\n                            {product?.total.toLocaleString('ru-Ru')}{' '}\r\n                            {product?.unit?.name}\r\n                        </span>\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? product.price.incomingpriceuzs.toLocaleString(\r\n                                  'ru-RU'\r\n                              )\r\n                            : product.price.incomingprice.toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  product.price.incomingpriceuzs * product.total\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  product.price.incomingprice * product.total\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className={`td text-right`}>\r\n                        {currency === 'UZS'\r\n                            ? product.price.sellingpriceuzs.toLocaleString(\r\n                                  'ru-RU'\r\n                              )\r\n                            : product.price.sellingprice.toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  product.price.sellingpriceuzs * product.total\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  product.price.sellingprice * product.total\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-[0.25rem] td'>\r\n                        <TableInput\r\n                            onChange={(e) => changeHandler(e, product)}\r\n                            type={'number'}\r\n                            value={inputVal(product._id, printedData)}\r\n                        />\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(product, 'single')}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport { map } from 'lodash'\r\nimport { roundUsd } from '../../../App/globalFunctions'\r\nexport const ProductTableRow = ({\r\n    currentPage,\r\n    countPage,\r\n    data,\r\n    Edit,\r\n    Delete,\r\n    currency,\r\n    currencyType,\r\n    productminimumpage,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr\r\n                    key={product._id}\r\n                    className='tr'\r\n                    id={'producttablerow' + index}\r\n                >\r\n                    <td className='td text-center '>\r\n                        {productminimumpage\r\n                            ? index + 1\r\n                            : currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product?.category?.code}{' '}\r\n                        {product?.category?.name && `- ${product?.category?.name}`}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product.productdata.code}\r\n                    </td>\r\n                    <td className='td text-left'>{product.productdata.name}</td>\r\n                    <td className='td text-right'>\r\n                        {product.total && product.total.toLocaleString('ru-RU') || 0}{' '}\r\n                        {product.unit && product.unit.name}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product?.packcount}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product.price && product?.price?.incomingpriceuzs && product?.price?.incomingpriceuzs.toLocaleString('ru-RU')}{' '} UZS\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product.price && product?.price?.incomingprice && roundUsd(product?.price?.incomingprice)}{' '} USD\r\n                    </td>\r\n                    <td className={`td text-right`}>\r\n                        {product.price && product?.price?.sellingpriceuzs && product?.price?.sellingpriceuzs.toLocaleString(\r\n                                    'ru-RU'\r\n                                )} {' '}\r\n                        UZS\r\n                    </td>\r\n                    <td style={{color: product?.isUsd && \"rgb(34 197 94)\"}} className={`td text-right`}>\r\n                        {product.price && product?.price?.sellingprice && roundUsd(product?.price?.sellingprice)} {' '}\r\n                        USD\r\n                    </td>\r\n                    <td\r\n                        className={`td text-right ${(productminimumpage &&\r\n                                'py-[0.625rem] border-r-0') ||\r\n                            ''\r\n                            }`}\r\n                    >\r\n                        {product?.minimumcount || ''}\r\n                    </td>\r\n                    {!productminimumpage && (\r\n                        <td className='td py-[0.375rem] border-r-0'>\r\n                            <div className='flex items-center justify-center'>\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor='bg-warning-500'\r\n                                    onClick={() =>\r\n                                        Edit('producttablerow' + index, product)\r\n                                    }\r\n                                />\r\n                                <TableBtn\r\n                                    type={'delete'}\r\n                                    bgcolor='bg-error-500 ml-2.5'\r\n                                    onClick={() => Delete(product)}\r\n                                />\r\n                            </div>\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\n\r\nexport const SupplierTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    Edit,\r\n    Delete,\r\n    linkToSupplierReport,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (supplier, index) => (\r\n                <tr key={supplier._id} className='tr'>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-left'>{supplier.name}</td>\r\n                    <td className='py-[0.375rem] td border-r-0 text-center'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'info'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() =>\r\n                                    linkToSupplierReport(supplier._id)\r\n                                }\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor='bg-warning-500'\r\n                                onClick={() => Edit(supplier)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor='bg-error-500'\r\n                                onClick={() => Delete(supplier)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\nexport const UnitTableRow = ({data, currentPage, countPage, Edit, Delete}) => {\r\n    return (\r\n        <>\r\n            {map(data,(unit, index) => (\r\n                <tr key={unit._id} className='tr'>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-left'>{unit.name}</td>\r\n                    <td className='py-[0.375rem] td border-r-0 text-center max-w-[50px]'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor='bg-warning-500'\r\n                                onClick={() => Edit(unit)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor='bg-error-500 ml-2.5'\r\n                                onClick={() => Delete(unit)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import {FaSortDown, FaSortUp} from 'react-icons/fa'\r\nimport {uniqueId, map} from 'lodash'\r\n\r\nfunction Thead({headers, Sort, sortItem}) {\r\n    const sort = (filter, pos) => {\r\n        let sortNum = sortItem && sortItem.filter === filter && sortItem.sort\r\n        return (pos === sortNum && 'rgba(255, 255, 255, 0.4)') || 'white'\r\n    }\r\n\r\n    const roundedStyle = (index) => {\r\n        return index === headers.length - 1\r\n            ? 'rounded-tr-lg'\r\n            : index === 0\r\n                ? 'rounded-tl-lg border-r-2 border-primary-700'\r\n                : 'border-r-2 border-primary-700'\r\n    }\r\n\r\n    return (\r\n        <tr className='bg-primary-900 rounded-t-lg'>\r\n            {map(headers,(header, index) => {\r\n                return (\r\n                    <th\r\n                        key={uniqueId('header')}\r\n                        scope='col'\r\n                        className={`th \r\n          ${roundedStyle(index)}\r\n          ${header.styles || ''}\r\n          `}\r\n                    >\r\n                        <div className='inline-flex items-center ml-1'>\r\n                            <span>{header.title}</span>{' '}\r\n                            {header.filter && (\r\n                                <button onClick={() => Sort(header.filter)}>\r\n                                    <FaSortUp\r\n                                        size={14}\r\n                                        color={sort(header.filter, '1')}\r\n                                        style={{\r\n                                            transform: 'translateY(50%)'\r\n                                        }}\r\n                                    />\r\n                                    <FaSortDown\r\n                                        size={14}\r\n                                        color={sort(header.filter, '-1')}\r\n                                        style={{\r\n                                            transform: 'translateY(-50%)'\r\n                                        }}\r\n                                    />\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </th>\r\n                )\r\n            })}\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Thead\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\n\r\nexport const IncomingsTableRow = ({\r\n    editedIncoming,\r\n    currency,\r\n    saveEditIncoming,\r\n    changeHandler,\r\n    Delete,\r\n    Edit,\r\n    currentPage,\r\n    countPage,\r\n    data,\r\n    onKeyUp,\r\n}) => {\r\n    const current = (usd, uzs) => (currency === 'USD' ? usd : uzs || 0)\r\n\r\n    return (\r\n        <>\r\n            {map(data, (incoming, index) => (\r\n                <tr className='tr' key={incoming._id}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-left'>{incoming.supplier.name}</td>\r\n                    <td className='td text-right'>\r\n                        {incoming.product.productdata.code}\r\n                    </td>\r\n                    <td className='td text-left'>\r\n                        {incoming.product.productdata.name}\r\n                    </td>\r\n                    <td className='td text-right font-bold'>\r\n                        {(editedIncoming._id === incoming._id && (\r\n                            <TableInput\r\n                                value={editedIncoming.pieces}\r\n                                onChange={(e) => changeHandler(e, 'pieces')}\r\n                                onKeyUp={onKeyUp}\r\n                            />\r\n                        )) || (\r\n                            <span>\r\n                                {incoming?.pieces?.toLocaleString('ru-RU')}{' '}\r\n                                <span className='text-warning-500 font-medium'>\r\n                                    {incoming?.unit?.name}\r\n                                </span>\r\n                            </span>\r\n                        )}\r\n                    </td>\r\n                    <td className='td text-right font-bold'>\r\n                        {(editedIncoming._id === incoming._id && (\r\n                            <TableInput\r\n                                value={current(\r\n                                    editedIncoming.unitprice,\r\n                                    editedIncoming.unitpriceuzs\r\n                                )}\r\n                                onChange={(e) => changeHandler(e, 'unitprice')}\r\n                                type={'number'}\r\n                                onKeyUp={onKeyUp}\r\n                            />\r\n                        )) || (\r\n                            <span>\r\n                                {current(\r\n                                    incoming.unitprice,\r\n                                    incoming.unitpriceuzs\r\n                                ).toLocaleString('ru-RU')}{' '}\r\n                                <span className='text-primary-800 font-medium'>\r\n                                    {currency}\r\n                                </span>\r\n                            </span>\r\n                        )}\r\n                    </td>\r\n                    <td className='td text-right font-bold'>\r\n                        {editedIncoming._id === incoming._id\r\n                            ? current(\r\n                                  editedIncoming.totalprice,\r\n                                  editedIncoming.totalpriceuzs\r\n                              ).toLocaleString('ru-RU')\r\n                            : current(\r\n                                  incoming.totalprice,\r\n                                  incoming.totalpriceuzs\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-success-500 font-medium'>\r\n                            {currency}\r\n                        </span>\r\n                    </td>\r\n                    <td className='td text-right font-bold'>\r\n                        {(editedIncoming._id === incoming._id && (\r\n                            <TableInput\r\n                                value={current(\r\n                                    editedIncoming.sellingprice,\r\n                                    editedIncoming.sellingpriceuzs\r\n                                )}\r\n                                onChange={(e) =>\r\n                                    changeHandler(e, 'sellingprice')\r\n                                }\r\n                                type={'number'}\r\n                                onKeyUp={onKeyUp}\r\n                            />\r\n                        )) || (\r\n                            <span>\r\n                                {current(\r\n                                    incoming.sellingprice,\r\n                                    incoming.sellingpriceuzs\r\n                                ).toLocaleString('ru-RU')}{' '}\r\n                                <span className='text-primary-800 font-medium'>\r\n                                    {currency}\r\n                                </span>\r\n                            </span>\r\n                        )}\r\n                    </td>\r\n                    <td className='td border-r-0 py-[6px]'>\r\n                        <div className='flex justify-center items-center gap-[0.625rem]'>\r\n                            {editedIncoming._id === incoming._id ? (\r\n                                <>\r\n                                    <TableBtn\r\n                                        type={'save'}\r\n                                        bgcolor={'bg-success-500'}\r\n                                        onClick={() =>\r\n                                            saveEditIncoming(incoming)\r\n                                        }\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <TableBtn\r\n                                        type={'edit'}\r\n                                        bgcolor={'bg-warning-500'}\r\n                                        onClick={() => Edit(incoming)}\r\n                                    />\r\n                                </>\r\n                            )}\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(incoming)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport { filter, map } from 'lodash'\r\nimport { IoAdd, IoEye, IoEyeOff, IoRemove } from 'react-icons/io5'\r\nimport { useSelector } from 'react-redux'\r\nimport SelectInput from '../../SelectInput/SelectInput'\r\nimport Select from 'react-select'\r\nimport Checkbox from '../../Checkbox/Checkbox'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nexport const RegisterSaleTableRow = (\r\n    {\r\n        data,\r\n        Delete,\r\n        changeHandler,\r\n        currency,\r\n        increment,\r\n        decrement,\r\n        lowUnitpriceProducts,\r\n        wholeSale,\r\n    }) => {\r\n    const {t} = useTranslation(['common'])\r\n    const { filials } = useSelector((state) => state.registerSelling)\r\n\r\n    const { market } = useSelector((state) => state.login)\r\n    const [showIncomingPrice, setShowIncomingPrice] = useState([])\r\n    const changeShow = (i) => {\r\n        const price = [...showIncomingPrice]\r\n        price[i] = !price[i]\r\n        setShowIncomingPrice([...price])\r\n    }\r\n    useEffect(() => {\r\n        setShowIncomingPrice(map(data, () => false))\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr className={`tr ${filter(lowUnitpriceProducts, id => id === product.product._id).length > 0 ? 'bg-warning-200' : ''}`}\r\n                    key={'salerow-' + index + 1}>\r\n                    <td className='text-left td'>{index + 1}</td>\r\n                    <td className='td w-[100px] text-center'>\r\n                        <div className='text-center'>\r\n                        <Checkbox\r\n                            id={`packcount-selling${index}`}\r\n                            onChange={(e) => changeHandler(\r\n                                index,\r\n                                e.target.value,\r\n                                'packcount'\r\n                            )}\r\n                            value={product?.isPackcount ? true : false}\r\n                        />\r\n                        </div>\r\n                    </td>\r\n                    <td className='text-right td font-bold'>{product?.isPackcount ? (product?.totalpackcount % 1 === 0 ? product?.totalpackcount.toFixed(0) : product?.totalpackcount.toFixed(2)) : product?.total.toFixed(2)}</td>\r\n                    <td className='text-left td'>{product.product.name}</td>\r\n                    <td className='text-right td'>\r\n                        <span className={'flex gap-[0.6rem] items-center'}>\r\n                            <TableInput\r\n                                value={product?.isPackcount ? product?.packcountpieces : product.pieces}\r\n                                onChange={(e) =>\r\n                                    changeHandler(\r\n                                        index,\r\n                                        e.target.value,\r\n                                        'pieces'\r\n                                    )\r\n                                }\r\n                                type={'number'}\r\n                            />\r\n                        </span>\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        <TableInput\r\n                            value={\r\n                                product?.isUsd\r\n                                    ? wholeSale ? product.tradeprice || product.unitprice : product.unitprice\r\n                                    : wholeSale ? product.tradepriceuzs || product.unitpriceuzs : product.unitpriceuzs\r\n                            }\r\n                            onChange={(e) =>\r\n                                changeHandler(\r\n                                    index,\r\n                                    e.target.value,\r\n                                    'unitprice'\r\n                                )\r\n                            }\r\n                            type={'number'}\r\n                        />\r\n                    </td>\r\n                    <td style={{color: product?.isUsd && \"rgb(34 197 94)\"}} className='text-right td'>\r\n                        {product?.isUsd\r\n                            ? product.totalprice\r\n                            : product.totalpriceuzs.toLocaleString(\r\n                                'ru-Ru'\r\n                            )}{' '}\r\n                        {product?.isUsd ? \"USD\" : \"UZS\"}\r\n                    </td>\r\n                    <td className='td'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(index)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0 text-success-500'>\r\n                        <div className='flex justify-between'>\r\n                            <button onClick={() => changeShow(index)}>\r\n                                {showIncomingPrice[index] ? (\r\n                                    <IoEye />\r\n                                ) : (\r\n                                    <IoEyeOff />\r\n                                )}\r\n                            </button>\r\n                            <span className='min-w-fit'>\r\n                                {showIncomingPrice[index]\r\n                                    ? currency === 'UZS'\r\n                                        ? product.incomingpriceuzs.toLocaleString(\r\n                                            'ru-Ru'\r\n                                        ) + ' UZS'\r\n                                        : product.incomingprice.toLocaleString(\r\n                                            'ru-Ru'\r\n                                        ) + ' USD'\r\n                                    : ''}\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {uniqueId, map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const TemporaryIncomingsTableRow = ({\r\n                                               data,\r\n                                               Print,\r\n                                               Edit,\r\n                                               Delete,\r\n                                               currency\r\n                                           }) => {\r\n    return (\r\n        <>\r\n            {map(data,(temporary, index) => (\r\n                <tr className='tr' key={uniqueId('temporary')}>\r\n                    <td className='td'>{1 + index}</td>\r\n                    <td className='td text-left'>{temporary.supplier.name}</td>\r\n                    <td className='td text-right'>\r\n                        {temporary.incomings.pieces}\r\n                    </td>\r\n                    <td className='text-success-500 td text-right'>\r\n                        {(currency === 'USD'\r\n                                ? temporary.incomings.totalprice\r\n                                : temporary.incomings.totalpriceuzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(temporary.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(temporary.createdAt).toLocaleTimeString()} PM\r\n                    </td>\r\n                    <td className='td py-[6px] border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(temporary)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => Edit(temporary)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(temporary)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import { uniqueId, map } from 'lodash'\r\nimport React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const TemporarySaleTableRow = ({ data, Delete, currency, Print }) => {\r\n    const navigate = useNavigate()\r\n    const { user } = useSelector((state) => state.login)\r\n    const link = user?.type?.toLowerCase() === 'seller' ? '/' : '/sotuv/sotish'\r\n    const linkToSale = (temporary) => {\r\n        navigate(link, { state: { temporary: { ...temporary } } })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data, ({ _id, temporary, createdAt }, index) => (\r\n                <tr className='tr' key={uniqueId('sale')}>\r\n                    <td className='td'>{1 + index}</td>\r\n                    <td className='td text-left'>\r\n                        {temporary.userValue ||\r\n                            temporary.clientValue.label ||\r\n                            temporary.packmanValue.label ||\r\n                            'Mijoz ismi kiritilmagan'}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {temporary.tableProducts.length}\r\n                    </td>\r\n                    <td className='text-success-500 td text-right'>\r\n                        {currency === 'USD'\r\n                            ? (temporary?.totalPrice || 0).toLocaleString('ru-RU')\r\n                            : (temporary?.totalPriceUzs || 0).toLocaleString('ru-RU')}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(createdAt).toLocaleTimeString()}\r\n                    </td>\r\n                    <td className='td py-[6px] border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() =>\r\n                                    Print({ _id, temporary, createdAt })\r\n                                }\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => linkToSale({ ...temporary, _id })}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(_id)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport { uniqueId, map } from 'lodash'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport { roundUsd, UzsToUsd, UsdToUzs } from '../../../App/globalFunctions'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const SalesListTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    // currency,\r\n    Print,\r\n    sellers,\r\n    addPlus,\r\n    editComment\r\n}) => {\r\n\r\n    const { currency } = useSelector((state) => state.currency)\r\n\r\n    const location = useLocation()\r\n\r\n    const result = (prev, usd, uzs) => {\r\n        return prev + uzs\r\n    }\r\n    const reduceEl = (arr, usd, uzs) => {\r\n        return arr ? arr.reduce((prev, item) => {\r\n            return result(prev, item[usd], item[uzs])\r\n        }, 0) : 0\r\n    }\r\n\r\n    // const calculateDebt = (data) => {\r\n    //     return data\r\n    //         ? data.reduce((acc, pr) => {\r\n    //             return (\r\n    //                 acc +\r\n    //                 (pr?.debt?.debtType === 'sum' ? pr?.debtuzs : 0)\r\n    //             )\r\n    //         }, 0)\r\n    //         : 0\r\n    // }\r\n\r\n    // const calculateDebtUsd = (data) => {\r\n    //     return data\r\n    //         ? data.reduce((acc, pr) => {\r\n    //             return (\r\n    //                 acc +\r\n    //                 (pr?.debt?.debtType === 'dollar' ? pr?.debt?.debt : 0)\r\n    //             )\r\n    //         }, 0)\r\n    //         : 0\r\n    // }\r\n\r\n    const navigate = useNavigate()\r\n    const linkToSale = (saleconnector, returnProducts) => {\r\n        navigate(`${sellers ? '/' : '/sotuv/sotish'}`, {\r\n            replace: true,\r\n            state: { saleconnector, returnProducts },\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {data && data.length > 0 && map(data, (saleconnector, index) => (\r\n                <tr className='tr' key={uniqueId('sales')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td '>\r\n                        <div className='flex justify-between'>\r\n                            <span>\r\n                                {new Date(\r\n                                    saleconnector.updatedAt\r\n                                ).toLocaleDateString()}\r\n                            </span>\r\n                            <span>\r\n                                {new Date(\r\n                                    saleconnector.updatedAt\r\n                                ).toLocaleTimeString()}{' '}\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                    <td className='text-left td'>{saleconnector.id}</td>\r\n                    <td className='text-left td'>\r\n                        {saleconnector?.client?.name}\r\n                        {/* {saleconnector?.client?.name ? (\r\n                            <div className='flex justify-between items-center'>\r\n                                <span> {saleconnector?.client?.name}</span>\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor={'bg-success-500'}\r\n                                    onClick={() => addPlus(saleconnector._id)}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <div className='flex justify-center items-center'>\r\n                                <TableBtn\r\n                                    type={'add'}\r\n                                    bgcolor={'bg-success-500'}\r\n                                    onClick={() => addPlus(saleconnector._id)}\r\n                                />\r\n                            </div>\r\n                        )} */}\r\n                    </td>\r\n                    <td className='text-success-500 text-right td'>\r\n                        {reduceEl(\r\n                            saleconnector.products,\r\n                            'totalprice',\r\n                            'totalpriceuzs'\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        UZS\r\n                    </td>\r\n                    <td className='text-warning-500 text-right td'>\r\n                        {saleconnector?.discounts && saleconnector.discounts.reduce((prev, el) => prev + (el.discountuzs && el.discountuzs || 0), 0)} UZS\r\n                    </td>\r\n                    <td className='text-warning-500 text-right td'>\r\n                        {saleconnector?.discounts && saleconnector.discounts.reduce((prev, el) => prev + (el.discount && el.discount || 0), 0)} USD\r\n                    </td>\r\n                    {/* <td className='text-warning-500 text-right td'>\r\n                        {reduceEl(\r\n                            saleconnector.discounts,\r\n                            'discount',\r\n                            'discountuzs'\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td> */}\r\n                    <td className='text-error-500 text-right td'>\r\n                        {saleconnector?.debtuzs} UZS\r\n                    </td>\r\n                    <td className='text-error-500 text-right td'>\r\n                        {roundUsd(saleconnector?.debtusd)} USD\r\n                    </td>\r\n                    <td className='text-left td  '>\r\n                        {saleconnector.dailyconnectors && saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1].comment ? (\r\n                            <div className='flex justify-between items-center'>\r\n                                <span>{saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1].comment}</span>\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor={'bg-success-500'}\r\n                                    onClick={() => editComment(saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1], saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1].comment)}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <div className='flex justify-center items-center'>\r\n                                <TableBtn\r\n                                    type={'add'}\r\n                                    bgcolor={'bg-success-500'}\r\n                                    onClick={() => editComment(saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1], saleconnector.dailyconnectors[saleconnector.dailyconnectors.length - 1].comment)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n\r\n                    </td>\r\n\r\n                    <td className='py-[0.375rem] td border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(saleconnector)}\r\n                            />\r\n                            {!location.pathname.includes('/kassa/sale') && <>\r\n                                {/* <TableBtn\r\n                                    type={'add'}\r\n                                    bgcolor={'bg-success-500'}\r\n                                    onClick={() => linkToSale(saleconnector)}\r\n                                /> */}\r\n                                <TableBtn\r\n                                    type={'return'}\r\n                                    bgcolor={'bg-error-500'}\r\n                                    onClick={() =>\r\n                                        linkToSale(\r\n                                            saleconnector.saleconnector,\r\n                                            true\r\n                                        )\r\n                                    }\r\n                                />\r\n                            </>}\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\nimport {universalToast} from '../../ToastMessages/ToastMessages'\r\nimport {roundUsd, roundUzs} from '../../../App/globalFunctions'\r\nimport {useSelector} from 'react-redux'\r\nexport const ClientTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    Edit,\r\n    Delete,\r\n    Print,\r\n}) => {\r\n    const {currencyType} = useSelector((state) => state.currency)\r\n    return (\r\n        <>\r\n            {map(data, (client, index) => (\r\n                <tr className='tr' key={client._id}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + index + 1}\r\n                    </td>\r\n                    {/* <td className='text-left td'>\r\n                        {client.packman ? client.packman.name : ''}\r\n                    </td> */}\r\n                    <td className='text-left td'>{client.name}</td>\r\n                    <td className='text-left td'>\r\n                        {currencyType === 'USD'\r\n                            ? (client?.saleconnector?.totalsales &&\r\n                                  roundUsd(\r\n                                      client?.saleconnector?.totalsales\r\n                                  ).toLocaleString('ru-RU')) ||\r\n                              0\r\n                            : (client?.saleconnector?.totalsalesuzs &&\r\n                                  roundUzs(\r\n                                      client?.saleconnector?.totalsalesuzs\r\n                                  ).toLocaleString('ru-RU')) ||\r\n                              0}{' '}\r\n                        {currencyType}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {currencyType === 'USD'\r\n                            ? (client?.saleconnector?.profit &&\r\n                                  roundUsd(\r\n                                      client?.saleconnector?.profit\r\n                                  ).toLocaleString('ru-RU')) ||\r\n                              0\r\n                            : (client?.saleconnector?.profituzs &&\r\n                                  roundUzs(\r\n                                      client?.saleconnector?.profituzs\r\n                                  ).toLocaleString('ru-RU')) ||\r\n                              0}{' '}\r\n                        {currencyType}\r\n                    </td>\r\n                    <td className='border-r-0 td py-[0.375rem]'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => {\r\n                                    if (client.saleconnector) {\r\n                                        Print(client?.saleconnector)\r\n                                    } else {\r\n                                        universalToast(\r\n                                            'Mijozda sotuv bulmagan!',\r\n                                            'warning'\r\n                                        )\r\n                                    }\r\n                                }}\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => Edit(client)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(client)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\n\r\nexport const ExchangenerateTableRow = ({\r\n                                           data,\r\n                                           currentPage,\r\n                                           countPage,\r\n                                           Edit,\r\n                                           Delete\r\n                                       }) => {\r\n    return (\r\n        <>\r\n            {map(data,(exchange, index) => (\r\n                <tr className='tr' key={exchange._id}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {new Date(exchange.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        1 USD - {exchange.exchangerate.toLocaleString('ru-Ru')} UZS\r\n                    </td>\r\n                    <td className='border-r-0 td py-[0.375rem]'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => Edit(exchange)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                                onClick={() => Delete(exchange)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\nexport const SaleReturnTableRow = ({\r\n                                       data,\r\n                                       changeHandler,\r\n                                       currency,\r\n                                       onKeyUp\r\n                                   }) => {\r\n    return (\r\n        <>\r\n            {map(data,(salereturn, index) => (\r\n                <tr className='tr' key={salereturn._id}>\r\n                    <td className='text-left td'>{index + 1}</td>\r\n                    <td className='text-right td'>\r\n                        {salereturn.productdata.code}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {salereturn.productdata.name}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {salereturn.product.pieces}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {(salereturn.product.isUsd\r\n                                ? salereturn.product.totalprice\r\n                                : salereturn.product.totalpriceuzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        {salereturn.product.isUsd ? \"USD\" : \"UZS\"}\r\n                    </td>\r\n                    <td className='text-right td py-[5px]'>\r\n                        <TableInput\r\n                            onKeyUp={onKeyUp}\r\n                            onChange={(e) =>\r\n                                changeHandler(\r\n                                    e.target.value,\r\n                                    salereturn._id,\r\n                                    index\r\n                                )\r\n                            }\r\n                            value={salereturn.pieces}\r\n                            type={'number'}\r\n                        />\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {salereturn.product.isUsd\r\n                            ? salereturn.totalprice\r\n                            : salereturn.totalpriceuzs}{' '}\r\n                        {salereturn.product.isUsd ? \"USD\" : \"UZS\"}\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import {uniqueId, map} from 'lodash'\r\nimport React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const CashierSaleTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n}) => {\r\n    const calculateTotalPrice = (datas, property) => {\r\n        return datas.reduce((summ, data) => summ + data[property], 0)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data, (saleconnector, index) => (\r\n                <tr className='tr' key={uniqueId('sales')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(saleconnector.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {saleconnector.saleconnector.id}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {saleconnector?.client?.name}\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-medium'>\r\n                        {(currency === 'USD'\r\n                            ? calculateTotalPrice(\r\n                                  saleconnector.products,\r\n                                  'totalprice'\r\n                              )\r\n                            : calculateTotalPrice(\r\n                                  saleconnector.products,\r\n                                  'totalpriceuzs'\r\n                              )\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {(currency === 'USD'\r\n                            ? Number(saleconnector?.payment?.cash || 0)\r\n                            : Number(saleconnector?.payment?.cashuzs || 0)\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        <span className='text-primary-800'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {(currency === 'USD'\r\n                            ? Number(saleconnector?.payment?.card || 0)\r\n                            : Number(saleconnector?.payment?.carduzs || 0)\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        <span className='text-success-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {(currency === 'USD'\r\n                            ? Number(saleconnector?.payment?.transfer || 0)\r\n                            : Number(saleconnector?.payment?.transferuzs || 0)\r\n                        ).toLocaleString('ru-Ru')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='td border-r-0'>\r\n                        <div className='flex justify-center'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(saleconnector)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import { uniqueId, map } from 'lodash'\r\nimport React from 'react'\r\nimport { roundUsd, roundUzs } from '../../../App/globalFunctions'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const PaymentsTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n    type\r\n}) => {\r\n\r\n    const payDebt = data.reduce((prev, el) => {\r\n        if (!el.totalprice && el.usdpayment) {\r\n            prev += el.usdpayment\r\n        }\r\n        return prev\r\n    }, 0)\r\n    const payDebtUzs = data.reduce((prev, el) => {\r\n        if (!el.totalprice) {\r\n            prev += el.cashuzs + el.carduzs + el.transferuzs\r\n        }\r\n        return prev\r\n    }, 0)\r\n    console.log(data);\r\n    return (\r\n        <>\r\n            {map(data, (sale, index) => (\r\n                <tr className='tr' key={uniqueId('sale')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(sale.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-right td'>{sale.id}</td>\r\n                    <td className='text-right td'>{sale?.client?.name}</td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {currency === 'USD'\r\n                            ? sale?.cash\r\n                            : sale?.cashuzs}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {sale?.usdpayment} USD\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {currency === 'USD'\r\n                            ? sale?.card\r\n                            : sale?.carduzs}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {currency === 'USD'\r\n                            ? sale?.transfer\r\n                            : sale?.transferuzs}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-success-500 text-right td py-[0.625rem] font-bold'>\r\n                        {!sale.totalprice && sale?.usdpayment} USD\r\n                    </td>\r\n                    <td className='text-success-500 text-right td py-[0.625rem] font-bold'>\r\n                        {!sale.totalprice && (sale.cashuzs + sale.carduzs + sale.transferuzs)} UZS\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {sale?.usdpayment < 0 ? sale?.usdpayment : sale.cash < 0 || sale.card < 0 || sale.transfer < 0 ? (<>\r\n                            {currency === 'USD' ? (sale.cash + sale.card + sale.transfer) : (sale.cashuzs + sale.carduzs + sale.transferuzs)}\r\n                        </>) : 0} {' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-[0.375rem] td border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(sale.saleconnector)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            <tr>\r\n                <td colSpan={8}>\r\n                </td>\r\n                <td className='text-right p-2 font-bold text-success-500'>\r\n                    {roundUzs(payDebtUzs).toLocaleString('ru-RU')} UZS <br/>\r\n                    {roundUsd(payDebt).toLocaleString('ru-RU')} USD\r\n                </td>\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n","import { uniqueId, map } from 'lodash'\r\nimport React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const IncomeTableRow = ({ data, currentPage, countPage, currency, Print }) => {\r\n    return (\r\n        <>\r\n            {map(data, (income, index) => (\r\n                <tr className='tr' key={uniqueId('income')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(income.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>{income.saleconnector.id}</td>\r\n                    <td className='text-right td font-bold text-error-500'>\r\n                        {(currency === 'USD'\r\n                            ? income.totalincomingprice\r\n                            : income.totalincomingpriceuzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        <span>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-bold text-primary-800'>\r\n                        {(currency === 'USD'\r\n                            ? income.totalprice\r\n                            : income.totalpriceuzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        <span>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold text-warning-500'>\r\n                        {(currency === 'USD'\r\n                            ? income.discount\r\n                            : income.discountuzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        <span>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-bold text-success-500'>\r\n                        {(currency === 'USD'\r\n                            ? income.profit\r\n                            : income.profituzs\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        <span>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right border-r-0 td font-bold text-success-500'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(income.dailyconnector)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import {uniqueId, map} from 'lodash'\r\nimport React, {useState} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { roundUsd, UsdToUzs, UzsToUsd } from '../../../App/globalFunctions'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const DebtsTableRow = ({data, Pay, Print, Edit}) => {\r\n    const { currency } = useSelector((state) => state.currency)\r\n    const [isEditComment, setIsEditComment] = useState(null)\r\n\r\n    return (\r\n        <>\r\n            {map(data, (debt, index) => (\r\n                <tr className='tr' key={uniqueId('debt')}>\r\n                    <td className='text-left td'>{1 + index}</td>\r\n                    <td className='text-right td'>\r\n                        {new Date(debt.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-right td'>{debt.id}</td>\r\n                    <td className='text-left td'>\r\n                        {debt.client && debt.client.name}\r\n                    </td>\r\n                    <td\r\n                        onMouseOver={() => setIsEditComment(debt._id)}\r\n                        onMouseOut={() => setIsEditComment(null)}\r\n                        className={`text-left td relative hover:bg-black-200 transition duration-300 ease-in-out`}\r\n                    >\r\n                        {debt.comment}\r\n                        {isEditComment === debt._id && (\r\n                            <span className='absolute top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%]'>\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor={'bg-warning-500'}\r\n                                    onClick={() =>\r\n                                        Edit(debt.comment, debt.debtid)\r\n                                    }\r\n                                />\r\n                            </span>\r\n                        )}\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {/* {debt?.debtusd || 0} USD */}\r\n                        {\r\n                            roundUsd(debt?.debtusd || 0)\r\n                        } USD\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-medium'>\r\n                        {/* {debt?.debtuzs || 0} UZS */}\r\n                        {\r\n                            debt?.debtuzs || 0\r\n                        } UZS\r\n                    </td>\r\n                    <td className='td border-r-0 py-[6px]'>\r\n                        <div className='flex justify-center items-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(debt.saleconnector)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'pay'}\r\n                                bgcolor={'bg-success-500'}\r\n                                onClick={() => Pay(debt)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import {uniqueId,map} from 'lodash'\r\nimport React from 'react'\r\n\r\nexport const DiscountTableRow = ({data, currentPage, countPage, currency}) => {\r\n    return (\r\n        <>\r\n            {map(data,(discount, index) => (\r\n                <tr className='tr' key={uniqueId('discount')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(discount.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {discount.saleconnector.id}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {discount.client && discount.client.name}\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                Math.round(discount.totalpriceuzs * 1) / 1\r\n                            ).toLocaleString('ru-RU')\r\n                            : (\r\n                                Math.round(discount.totalprice * 1000) / 1000\r\n                            ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                Math.round(discount.discountuzs * 1) / 1\r\n                            ).toLocaleString('ru-RU')\r\n                            : (\r\n                                Math.round(discount.discount * 1000) / 1000\r\n                            ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-success-500'>{currency}</span>\r\n                    </td>\r\n                    {/* <td className='text-right td border-r-0 py-[0.625rem] font-medium'>\r\n                        {discount?.procient?.toLocaleString()}{' '}\r\n                        <span className='text-primary-500'>%</span>\r\n                    </td> */}\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\nexport const ExpensesTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    reports,\r\n    Delete,\r\n}) => {\r\n    const typeofexpense = (type) => {\r\n        switch (type) {\r\n            case 'cash':\r\n                return 'Naqt'\r\n            case 'card':\r\n                return 'Plastik'\r\n            case 'transfer':\r\n                return \"O'tkazma\"\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data,(expense, index) => (\r\n                <tr className='tr' key={expense._id}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(expense.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'USD' ? expense.sum: expense.sumuzs.toLocaleString('ru-Ru')}{' '}\r\n                        <span>{currency}</span>\r\n                    </td>\r\n                    <td className='text-left td'>{expense.comment}</td>\r\n                    <td className='text-left py-[0.625rem] td'>\r\n                        {typeofexpense(expense.type)}\r\n                    </td>\r\n                    {!reports && (\r\n                        <td className='border-r-0 py-[0.625rem] td'>\r\n                            <div className='flex items-center justify-center'>\r\n                                <TableBtn\r\n                                    type={'delete'}\r\n                                    bgcolor={'bg-error-500'}\r\n                                    onClick={() => Delete(expense)}\r\n                                />\r\n                            </div>\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {uniqueId, map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn.js'\r\n\r\nexport const BarcodeTableRow = (\r\n    {\r\n        data,\r\n        currentPage,\r\n        countPage,\r\n        Edit,\r\n        Delete\r\n    }) => {\r\n    return (<>\r\n        {\r\n            map(data,(item, index) =>\r\n                <tr className='tr' key={uniqueId('sales')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td'>{item.barcode}</td>\r\n                    <td className='td'>{item.name}</td>\r\n                    <td className='td border-r-0 text-center max-w-[50px] py-[0.375rem]'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor='bg-warning-500'\r\n                                onClick={() => Edit(item)}\r\n                            />\r\n                            <TableBtn\r\n                                type={'delete'}\r\n                                bgcolor='bg-error-500 ml-2.5'\r\n                                onClick={() => Delete(item)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        }\r\n    </>)\r\n}","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {map} from 'lodash'\r\nexport const AdminProductTableRow = ({\r\n    currentPage,\r\n    countPage,\r\n    data,\r\n    Edit,\r\n    onClickTableRow,\r\n    handleDelete,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (market, index) => (\r\n                <tr\r\n                    key={market._id}\r\n                    className='tr cursor-pointer'\r\n                    onClick={() => onClickTableRow(market)}\r\n                >\r\n                    <td className='td text-left'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center p-[0.625rem_0.875rem]'>\r\n                        <div\r\n                            className={\r\n                                'w-[2.5rem] h-[2.5rem] mx-auto rounded-full border-[2px] border-primary-700 flex items-center justify-center p-[2px]'\r\n                            }\r\n                        >\r\n                            {market?.image ? (\r\n                                <img\r\n                                    src={market.image}\r\n                                    alt={market.name}\r\n                                    className={'rounded-full'}\r\n                                />\r\n                            ) : (\r\n                                `${market?.name[0].toUpperCase()}`\r\n                            )}\r\n                        </div>\r\n                    </td>\r\n                    <td className='td text-left'>{market?.name}</td>\r\n                    <td className='td text-left'>\r\n                        {market?.director?.firstname}{' '}\r\n                        {market?.director?.lastname}\r\n                    </td>\r\n                    <td className='td text-right'>{market?.phone1}</td>\r\n                    <td className='td text-center'>\r\n                        {market?.mainmarket ? (\r\n                            <div className='w-[24px] h-[24px] mx-auto bg-[#F79009] rounded-[50%]'></div>\r\n                        ) : (\r\n                            <div className='w-[24px] h-[24px] mx-auto bg-[#12B76A] rounded-[50%]'></div>\r\n                        )}\r\n                    </td>\r\n                    <td className='td '>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor='bg-warning-500'\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation()\r\n                                    Edit(market)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0'>\r\n                        <TableBtn\r\n                            type={'delete'}\r\n                            bgcolor='bg-error-500 ml-2.5'\r\n                            onClick={(e) => {\r\n                                e.stopPropagation()\r\n                                handleDelete(market)\r\n                            }}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import {uniqueId, map} from 'lodash'\r\nimport React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const ReturnProductsTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (connector, index) => (\r\n                <tr className='tr' key={uniqueId('connector')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(connector.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {connector.saleconnector.id}\r\n                    </td>\r\n                    <td className='text-left td'>\r\n                        {connector.saleconnector?.client &&\r\n                            connector.saleconnector?.client?.name}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {Number(connector.count).toLocaleString()}\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? connector.totalpriceuzs.toLocaleString('ru-RU')\r\n                            : connector.totalprice.toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? connector.backuzs.toLocaleString('ru-RU')\r\n                            : connector.back.toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-success-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='td border-r-0 py-[6px]'>\r\n                        <div className='flex justify-center items-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(connector.dailyconnector)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {uniqueId} from 'lodash'\r\n\r\nexport const GeneralReportTableRow = ({data, currency}) => {\r\n    return (\r\n        <>\r\n            <tr className='tr' key={uniqueId('sales')}>\r\n                <td className='text-center td py-2'>\r\n                    {data?.salesCount?.toLocaleString()}\r\n                </td>\r\n                <td className='td text-center'>\r\n                    {data?.saleProducts?.toLocaleString()}\r\n                </td>\r\n                <td className='td text-right font-bold'>\r\n                    {currency === 'UZS'\r\n                        ? data?.totalpriceuzs?.toLocaleString()\r\n                        : data?.totalprice?.toLocaleString()}{' '}\r\n                    {currency}\r\n                </td>\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { reduce } from 'lodash'\r\nimport { roundUsd } from '../../../App/globalFunctions'\r\n\r\nexport const RegisterSaleTableFooter = ({ saleproducts, currency }) => {\r\n\r\n    const totalprice = reduce(\r\n        saleproducts,\r\n        (summ, product) => summ + (product?.isUsd && product.totalprice || 0),\r\n        0\r\n    )\r\n\r\n    const totalpriceuzs = reduce(\r\n        saleproducts,\r\n        (summ, product) => summ + (!product?.isUsd && product.totalpriceuzs || 0),\r\n        0\r\n    )\r\n    return (\r\n        <tr>\r\n            <th colSpan={5} className='text-right py-2'>\r\n                Jami:\r\n            </th>\r\n            <th colSpan={2} className=\"py-2\">\r\n                {totalpriceuzs.toLocaleString('ru-RU')}{' '} UZS <br/> <br/>\r\n                {roundUsd(totalprice)}{' '} USD\r\n            </th>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {IoArrowRedoCircleSharp} from 'react-icons/io5'\r\nimport {map, uniqueId} from 'lodash'\r\nimport {Link} from 'react-router-dom'\r\nexport const FilialShopTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n}) => {\r\n    return (\r\n        <>\r\n          {data && map(data, (item, index) => (\r\n                <tr className='tr' key={uniqueId('item')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(item?.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-left td'>{item?.id}</td>\r\n                    <td className='text-left td'>{item?.products.length}</td>\r\n                    <td className='text-left td'>{item?.pieces}</td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  Math.round(item.totalincomingpriceuzs * 1) / 1\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  Math.round(item.totalincomingprice * 1000) /\r\n                                  1000\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  Math.round(item?.totalsellingpriceuzs * 1) / 1\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  Math.round(item?.totalsellingprice * 1000) /\r\n                                  1000\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='py-[0.375rem] td text-center'>\r\n                        <div className='flex items justify-center'>\r\n                            <Link to='exchangesId' state={{id : item?._id}}>\r\n                                <IoArrowRedoCircleSharp\r\n                                    size={'1.75rem'}\r\n                                    className='cursor-pointer text-black-800'\r\n                                />\r\n                            </Link>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map, uniqueId} from 'lodash'\r\nimport {useSelector} from 'react-redux'\r\n\r\nfunction DailyReport({data}) {\r\n    const {currencyType} = useSelector((state) => state.currency)\r\n    return (\r\n        <>\r\n            {map(data, (dailyReport, index) => {\r\n                const {\r\n                    product: {\r\n                        productdata: {name, code},\r\n                        unit,\r\n                    },\r\n                    pieces,\r\n                    createdAt,\r\n                    unitprice,\r\n                    unitpriceuzs,\r\n                    totalprice,\r\n                    totalpriceuzs,\r\n                    user: {firstname, lastname},\r\n                } = dailyReport\r\n                return (\r\n                    <tr className='tr' key={uniqueId('daily-report-row')}>\r\n                        <td className='text-left td py-[0.375rem]'>\r\n                            {index + 1}\r\n                        </td>\r\n                        <td className='td'>\r\n                            <span className={'flex justify-between w-full'}>\r\n                                <p>\r\n                                    {' '}\r\n                                    {new Date(createdAt).toLocaleDateString(\r\n                                        'ru-RU'\r\n                                    )}{' '}\r\n                                </p>\r\n                                <p>\r\n                                    {new Date(createdAt).toLocaleTimeString(\r\n                                        'ru-RU',\r\n                                        {\r\n                                            hour: '2-digit',\r\n                                            minute: '2-digit',\r\n                                            hourCycle: 'h24',\r\n                                        }\r\n                                    )}\r\n                                </p>\r\n                            </span>\r\n                        </td>\r\n                        <td className='text-left td'>\r\n                            {dailyReport.saleconnector?.client?.name ||\r\n                                dailyReport.saleconnector?.id}\r\n                        </td>\r\n                        <td className='td text-right'>{code}</td>\r\n                        <td className='td'>{name}</td>\r\n                        <td className='text-right td'>\r\n                            {dailyReport?.previous || ''}\r\n                        </td>\r\n                        <td className='text-right td'>\r\n                            {pieces + ' ' + unit.name || ''}\r\n                        </td>\r\n                        <td className='text-right td'>\r\n                            {dailyReport?.next ? dailyReport.next : ''}\r\n                        </td>\r\n                        <td className='text-right td font-medium'>\r\n                            {currencyType === 'UZS'\r\n                                ? unitpriceuzs.toLocaleString('ru-RU')\r\n                                : unitprice.toLocaleString('ru-RU')}\r\n                        </td>\r\n                        <td className='text-right td font-medium'>\r\n                            {currencyType === 'UZS'\r\n                                ? totalpriceuzs.toLocaleString('ru-RU')\r\n                                : totalprice.toLocaleString('ru-RU')}\r\n                        </td>\r\n                        <td className='text-left td'>\r\n                            {lastname[0] + '. ' + firstname}\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DailyReport\r\n","import {map} from 'lodash'\r\nimport React from 'react'\r\nimport {IoCheckmark} from 'react-icons/io5'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nconst SupplierIncomingsTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Pay,\r\n}) => {\r\n    const reducer = (arr, key) =>\r\n        arr.reduce((prev, item) => prev + item[key], 0)\r\n    const changeCurrency = (item, key) =>\r\n        currency === 'USD' ? item[key] : item[key + 'uzs']\r\n\r\n    return (\r\n        <>\r\n            {map(data, (connector, index) => (\r\n                <tr key={connector._id} className='tr'>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(connector.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {new Date(connector.createdAt).toLocaleTimeString()}\r\n                    </td>\r\n                    <td className='td text-right'>{connector.id}</td>\r\n                    <td className='td text-right'>\r\n                        {connector.incoming.length}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {reducer(connector.incoming, 'pieces')}\r\n                    </td>\r\n                    <td className='td text-right font-medium text-primary-700'>\r\n                        {changeCurrency(connector, 'total').toLocaleString(\r\n                            'ru-RU'\r\n                        )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right font-medium text-success-500'>\r\n                        {changeCurrency(\r\n                            connector,\r\n                            'totalpayment'\r\n                        ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td\r\n                        className={`td text-right font-medium ${\r\n                            connector.debt !== 0\r\n                                ? 'text-error-500'\r\n                                : 'text-black-900'\r\n                        }`}\r\n                    >\r\n                        {changeCurrency(connector, 'debt').toLocaleString(\r\n                            'ru-RU'\r\n                        )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-[0.375rem] td border-r-0 text-center'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            {connector.debt !== 0 ? (\r\n                                <TableBtn\r\n                                    type={'pay'}\r\n                                    bgcolor={'bg-error-500'}\r\n                                    onClick={() => Pay(connector)}\r\n                                />\r\n                            ) : (\r\n                                <div\r\n                                    className={`w-[24px] h-[24px] flex justify-center items-center rounded-full bg-success-500`}\r\n                                >\r\n                                    <IoCheckmark color='white' />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SupplierIncomingsTableRow\r\n","import React from 'react'\r\nimport {map, uniqueId} from 'lodash'\r\nexport const FilialShopDataIdTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n}) => {\r\n    return (\r\n        <>\r\n            {data && map(data, (item, index) => (\r\n                <tr className='tr' key={uniqueId('item')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {item?.category?.code}\r\n                    </td>\r\n                    <td className='text-left td py-[0.75rem]'>{item?.productdata?.code}</td>\r\n                    <td className='text-left td'>{item?.productdata?.name}</td>\r\n                    <td className='text-left td'>{item?.pieces}</td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  Math.round(item?.price?.incomingpriceuzs * 1) / 1\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  Math.round(item?.price?.incomingprice * 1000) /\r\n                                  1000\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n                    <td className='text-right td font-medium'>\r\n                        {currency === 'UZS'\r\n                             ? (\r\n                                Math.round(item?.price?.incomingpriceuzs + item?.price?.sellingpriceuzs)\r\n                            ).toLocaleString('ru-RU')\r\n                          : (\r\n                                Math.round(item?.price?.incomingprice + item?.price?.sellingprice) \r\n                            ).toLocaleString('ru-RU')}{' '}\r\n                      <span className='text-warning-500'>{currency}</span>\r\n                    </td>\r\n\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { map } from 'lodash'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const CategoryReportTableRow = ({ data }) => {\r\n    const { currencyType } = useSelector((state) => state.currency)\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr key={product._id} className='tr'>\r\n                    <td className='td text-center p-2'>\r\n                        {index + 1}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product.productdata.code}\r\n                    </td>\r\n                    <td className='td text-left'>{product.productdata.name}</td>\r\n                    <td className='td text-right'>\r\n                        {product.total.toLocaleString('ru-RU')}{' '}\r\n                        {product.unit && product.unit.name}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product.price && currencyType === 'USD' ? product.price.incomingprice.toLocaleString(\r\n                            'ru-RU'\r\n                        ) : product.price.incomingpriceuzs.toLocaleString(\r\n                            'ru-RU'\r\n                        )} {currencyType}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product.price && currencyType === 'USD' ? product.price.sellingprice.toLocaleString(\r\n                            'ru-RU'\r\n                        ) : product.price.sellingpriceuzs.toLocaleString(\r\n                            'ru-RU'\r\n                        )} {currencyType}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {product?.totalsaleproducts.toLocaleString(\r\n                            'ru-RU'\r\n                        )}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currencyType === 'USD' ? product?.totalsales.toLocaleString(\r\n                            'ru-RU'\r\n                        ) : product?.totalsalesuzs.toLocaleString(\r\n                            'ru-RU'\r\n                        )} {currencyType}\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport {useParams} from 'react-router-dom'\r\nimport ProductCheckbox from '../../Checkbox/ProductCheckBox.js'\r\nexport const MarketProductsTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    handleShowProduct,\r\n}) => {\r\n    const partner = useParams().id\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr key={product._id} className='tr'>\r\n                    <td className='td py-2'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product?.productdata?.barcode}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product?.category?.code}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        {product?.productdata?.code}\r\n                    </td>\r\n                    <td className='td text-left'>\r\n                        {product?.productdata?.name}\r\n                    </td>\r\n                    <td className='td'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <ProductCheckbox\r\n                                onChange={(e) =>\r\n                                    handleShowProduct(\r\n                                        e,\r\n                                        product._id,\r\n                                        partner,\r\n                                        index\r\n                                    )\r\n                                }\r\n                                value={product?.connections?.some(\r\n                                    (connection) => connection === partner\r\n                                )}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\n\r\nexport const PartnerProductsTableRow = ({data, currentPage, countPage}) => {\r\n\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr key={product._id} className='tr'>\r\n                    <td className='td py-2'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>{product?.productdata?.barcode}</td>\r\n                    <td className='td text-center'>{product?.category?.code}</td>\r\n                    <td className='td text-center'>{product?.productdata?.code}</td>\r\n                    <td className='td text-left'>{product?.productdata?.name}</td>\r\n                    <td className='td text-end'>{product?.total} {product?.unit?.name}</td>\r\n                    <td className='td text-end'>{product?.price?.sellingpriceuzs}</td>\r\n                    <td className='td text-end'>{product?.price?.sellingprice}</td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {components} from 'react-select'\r\nimport {IoCaretDown} from 'react-icons/io5'\r\n\r\nexport const DropdownIcon = (props) => {\r\n    return (\r\n        <components.DropdownIndicator {...props}>\r\n            <IoCaretDown size={'0.625rem'} color={'#86A7E9'} />\r\n        </components.DropdownIndicator>\r\n    )\r\n}\r\n\r\nconst DropdownIndicator = (styles, {isFocused}) => ({\r\n    ...styles,\r\n    padding: 0,\r\n    paddingRight: '.625rem',\r\n    color: isFocused ? '#193F8A' : '#071F45',\r\n})\r\nconst Menu = (styles) => ({\r\n    ...styles,\r\n})\r\nconst Option = (styles, {isDisabled}) => ({\r\n    ...styles,\r\n    fontSize: '.875rem',\r\n    fontWeight: '400',\r\n    padding: '5px 8px',\r\n    color: isDisabled ? '#DBDEDC' : '#071F45',\r\n    backgroundColor: '#fff',\r\n    '&:hover': {\r\n        backgroundColor: !isDisabled && '#EAEAEA',\r\n    },\r\n    transition: 'all 0.2s ease',\r\n    overflow: 'hidden',\r\n    cursor: !isDisabled && 'pointer',\r\n})\r\nconst SingleValue = (styles) => ({\r\n    ...styles,\r\n    color: '#1c1c1c',\r\n    fontSize: '.875rem',\r\n    lineHeight: '1.25rem',\r\n    fontWeight: '400',\r\n    margin: 0,\r\n})\r\nconst ValueContainer = (styles) => ({\r\n    ...styles,\r\n    padding: 0,\r\n})\r\n\r\nconst Placeholder = (styles, {isDisabled}) => ({\r\n    ...styles,\r\n    margin: 0,\r\n    color: isDisabled ? 'rgba(28, 28, 28, 0.2)' : '#86A7E9',\r\n})\r\nconst Control = (styles, {isDisabled}) => ({\r\n    ...styles,\r\n    width: '100%',\r\n    height: '100%',\r\n    padding: '.3rem .58rem',\r\n    borderRadius: '.25rem',\r\n    fontSize: '.875rem',\r\n    fontWeight: '400',\r\n    color: '#86A7E9',\r\n    outline: 'none',\r\n    boxShadow: '0px 10px 10px rgba(0, 0, 0, 0.05)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        backgroundColor: '#EAEAEA',\r\n    },\r\n    '&:focus-within': {\r\n        outline: '4px solid #A9C0EF',\r\n        backgroundColor: '#ffffff',\r\n    },\r\n    backgroundColor: isDisabled ? 'rgba(28, 28, 28, 0.2)' : '#fff',\r\n    border: isDisabled ? 'none' : '1px solid #86A7E9',\r\n})\r\n\r\nconst inputStyles = (styles) => ({\r\n    ...styles,\r\n    padding: 0,\r\n    display: 'flex',\r\n    lineHeight: '1.25rem',\r\n    margin: 0,\r\n})\r\n\r\nconst CustomStyle = {\r\n    container: (styles) => ({\r\n        ...styles,\r\n        width: '100%',\r\n    }),\r\n    control: Control,\r\n    option: Option,\r\n    menu: Menu,\r\n    singleValue: SingleValue,\r\n    valueContainer: ValueContainer,\r\n    dropdownIndicator: DropdownIndicator,\r\n    placeholder: Placeholder,\r\n    input: inputStyles,\r\n}\r\n\r\nexport default CustomStyle\r\n","import React from 'react'\r\nimport Select from 'react-select'\r\nimport CustomStyle, {DropdownIcon} from '../SelectTable/CustomStyle.js'\r\n\r\nconst SelectTable = ({\r\n    onSelect,\r\n    options,\r\n    isDisabled,\r\n    label,\r\n    placeholder,\r\n    value,\r\n    defaultValue,\r\n}) => {\r\n    return (\r\n        <div className='grow'>\r\n            {label && (\r\n                <label\r\n                    className={\r\n                        'text-blue-700 block leading-[1.125rem] mb-[.625rem]'\r\n                    }\r\n                >\r\n                    {label}\r\n                </label>\r\n            )}\r\n            <Select\r\n                onChange={onSelect}\r\n                styles={CustomStyle}\r\n                value={value}\r\n                defaultValue={defaultValue}\r\n                options={options}\r\n                isDisabled={isDisabled}\r\n                placeholder={placeholder}\r\n                components={{\r\n                    IndicatorSeparator: () => null,\r\n                    DropdownIndicator: DropdownIcon,\r\n                }}\r\n                isSearchable={false}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectTable\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn.js'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {\r\n    IoCheckmarkCircleSharp,\r\n    IoCloseCircleSharp,\r\n    IoHourglass,\r\n} from 'react-icons/io5'\r\nimport SelectTable from '../../SelectTable/SelectTable.js'\r\n\r\nexport const RegisterOrdersTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n}) => {\r\n    const navigate = useNavigate()\r\n    const linkToSale = (position, order) => {\r\n        navigate('/dukonlar/buyurtma_berish/buyurtmalar', {\r\n            state: {order: {...order}, position},\r\n        })\r\n    }\r\n    const positions = [\r\n        {name: \"so'ralgan\", position: 'requested'},\r\n        {name: 'tasdiqlangan', position: 'accepted'},\r\n        {name: \"jo'natilgan\", position: 'send'},\r\n        {name: 'qabul qilish', position: 'delivered'},\r\n        {name: 'yakunlangan', position: 'completed'},\r\n    ]\r\n\r\n    const createOptions = (currentPosition) => {\r\n        let hasEqual = false\r\n        const check = (position, index) => {\r\n            if (currentPosition === 'requested' && index === 0) return false\r\n            if (\r\n                (currentPosition === 'send' ||\r\n                    currentPosition === 'delivered') &&\r\n                index === 3\r\n            )\r\n                return false\r\n            if (currentPosition === 'send' && index === 3) return false\r\n            return true\r\n        }\r\n        const checkPosition = ({position, currentPosition, index}) => {\r\n            if (position.position === currentPosition) {\r\n                hasEqual = true\r\n            }\r\n            return {\r\n                label: (\r\n                    <span className='flex'>\r\n                        {position.position === currentPosition || !hasEqual ? (\r\n                            <IoCheckmarkCircleSharp size={17} color={'green'} />\r\n                        ) : (\r\n                            <IoHourglass size={17} color='#F89009' />\r\n                        )}\r\n                        <span className='pl-2'>{position.name}</span>\r\n                    </span>\r\n                ),\r\n                value: position.position,\r\n                isDisabled: check(position.position, index),\r\n            }\r\n        }\r\n        return map(positions, (position, index) =>\r\n            checkPosition({position, currentPosition, index})\r\n        )\r\n    }\r\n    const createValue = (currentPosition) => {\r\n        const check = currentPosition === 'rejected'\r\n        const val = positions.find((pos) => pos.position === currentPosition)\r\n        return {\r\n            value: val?.position,\r\n            label: (\r\n                <span className='flex'>\r\n                    {check ? (\r\n                        <IoCloseCircleSharp size={17} color={'red'} />\r\n                    ) : (\r\n                        <IoCheckmarkCircleSharp size={17} color='green' />\r\n                    )}{' '}\r\n                    <span className='pl-2'>\r\n                        {check ? 'red etilgan' : val?.name}\r\n                    </span>\r\n                </span>\r\n            ),\r\n            isDisabled: true,\r\n        }\r\n    }\r\n    const handleChange = (e, order) => {\r\n        ;(e.value === 'requested' || e.value === 'delivered') &&\r\n            linkToSale(e.value, order)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-end '>\r\n                        <div className='flex justify-between'>\r\n                            <span>\r\n                                {new Date(item?.createdAt).toLocaleTimeString()}\r\n                            </span>\r\n                            <span>\r\n                                {new Date(item?.createdAt).toLocaleDateString()}\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                    <td className='td text-end'>{item?.sender?.name}</td>\r\n                    <td className='td text-start'>{item?.sender?.inn}</td>\r\n                    <td className='td text-end'>{item?.id}</td>\r\n                    <td className='td text-end'>{item?.products?.length}</td>\r\n                    <td className='td text-end font-bold'>\r\n                        {currency === 'UZS'\r\n                            ? item?.totalpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.totalprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(item)}\r\n                            />\r\n                            {\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor={'bg-warning-500'}\r\n                                    onClick={() => linkToSale(item)}\r\n                                    isDisabled={item?.position !== 'requested'}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0'>\r\n                        <SelectTable\r\n                            options={\r\n                                item?.position !== 'rejected'\r\n                                    ? createOptions(item.position)\r\n                                    : []\r\n                            }\r\n                            defaultValue={createValue(item.position)}\r\n                            onSelect={(e) => handleChange(e, item)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {IoAdd, IoRemove} from 'react-icons/io5'\r\nexport const OrderProductsTableRow = ({\r\n    data,\r\n    currency,\r\n    increment,\r\n    decrement,\r\n    handleDelete,\r\n    handleCountProduct,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>{1 + index}</td>\r\n                    <td className='td text-center'>{item?.product?.code}</td>\r\n                    <td className='td text-left'>{item?.product?.name}</td>\r\n                    <td className='td text-end'>\r\n                        {item?.total?.toLocaleString('ru-Ru')}{' '}\r\n                        {item?.unit?.name}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {currency === 'UZS'\r\n                            ? item?.unitpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.unitprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        <span className={'flex gap-[0.6rem] items-center'}>\r\n                            <button\r\n                                onClick={() => decrement(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-error-500 hover:bg-error-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoRemove size={'0.875rem'} />\r\n                            </button>\r\n                            <TableInput\r\n                                value={item?.pieces.recived}\r\n                                onChange={(e) =>\r\n                                    handleCountProduct(e, item?.product?._id)\r\n                                }\r\n                                type={'number'}\r\n                            />\r\n                            <button\r\n                                onClick={() => increment(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-success-500 hover:bg-success-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoAdd size={'0.875rem'} />\r\n                            </button>\r\n                        </span>\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {currency === 'UZS'\r\n                            ? item?.totalpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.totalprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td'>\r\n                        <div className='flex items-center justify-center gap-[5px]'>\r\n                            <TableBtn\r\n                                onClick={() => handleDelete(index)}\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport {useNavigate} from 'react-router-dom'\r\nexport const SavedOrdersTableRow = ({data, Delete, handlePrint}) => {\r\n    const navigate = useNavigate()\r\n    const linkToSale = (temporary) => {\r\n        navigate('/dukonlar/buyurtma_berish/buyurtmalar', {\r\n            state: {...temporary},\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>{1 + index}</td>\r\n                    <td className='td text-end'>\r\n                        {new Date(item?.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {new Date(item?.createdAt).toLocaleTimeString()}\r\n                    </td>\r\n                    <td className='td text-left'>\r\n                        {item?.temporary?.partner?.label}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {item?.temporary?.tableProducts?.length}\r\n                    </td>\r\n                    <td className='td text-end font-bold'>\r\n                        {item?.temporary?.totalPrice?.toLocaleString('ru-RU')}{' '}\r\n                        USD\r\n                    </td>\r\n                    <td className='td text-end font-bold'>\r\n                        {item?.temporary?.totalPriceUzs?.toLocaleString(\r\n                            'ru-RU'\r\n                        )}{' '}\r\n                        UZS\r\n                    </td>\r\n                    <td className='td border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                onClick={() => handlePrint(item.temporary)}\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                            />\r\n                            <TableBtn\r\n                                type={'edit'}\r\n                                bgcolor={'bg-warning-500'}\r\n                                onClick={() => linkToSale(item)}\r\n                            />\r\n                            <TableBtn\r\n                                onClick={() => Delete(item._id)}\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn.js'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {\r\n    IoCheckmarkCircleSharp,\r\n    IoCloseCircleSharp,\r\n    IoHourglass,\r\n} from 'react-icons/io5'\r\nimport SelectTable from '../../SelectTable/SelectTable.js'\r\n\r\nexport const RegisterIncomingOrdersTableRow = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n    updatePosition,\r\n}) => {\r\n    const navigate = useNavigate()\r\n    const linkToSale = (order, position) => {\r\n        navigate('/dukonlar/buyurtma_olish/buyurtmalar', {\r\n            state: {order: {...order}, position},\r\n        })\r\n    }\r\n    const positions = [\r\n        {name: \"so'ralgan\", position: 'requested'},\r\n        {name: 'tasdiqlash', position: 'accepted'},\r\n        {name: 'rad etish', position: 'rejected'},\r\n        {name: \"jo'natish\", position: 'send'},\r\n        {name: 'yetkazilgan', position: 'delivered'},\r\n        {name: 'yakunlash', position: 'completed'},\r\n    ]\r\n\r\n    const createOptions = (currentPosition) => {\r\n        let hasEqual = false\r\n        const check = (position, index) => {\r\n            if (currentPosition === 'delivered' && index === 5) return false\r\n            if (currentPosition === 'send' && index === 3) return false\r\n            if (\r\n                currentPosition === 'accepted' &&\r\n                (index === 3 || index === 2 || index === 1)\r\n            )\r\n                return false\r\n            if (\r\n                (currentPosition === 'requested' ||\r\n                    currentPosition === 'rejected') &&\r\n                (index === 1 || index === 2)\r\n            ) {\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n        const checkPosition = ({position, index}) => {\r\n            if (position.position === currentPosition) {\r\n                hasEqual = true\r\n            }\r\n            return {\r\n                label: (\r\n                    <span className='flex'>\r\n                        {position.position === 'rejected' ? (\r\n                            <IoCloseCircleSharp size={17} color={'red'} />\r\n                        ) : position.position === currentPosition ||\r\n                          !hasEqual ? (\r\n                            <IoCheckmarkCircleSharp size={17} color={'green'} />\r\n                        ) : (\r\n                            <IoHourglass size={17} color='#F89009' />\r\n                        )}\r\n                        <span className='pl-2'>\r\n                            {currentPosition === 'completed' && index === 5\r\n                                ? 'yakunlangan'\r\n                                : position.name}\r\n                        </span>\r\n                    </span>\r\n                ),\r\n                value: position.position,\r\n                isDisabled: check(position.position, index),\r\n            }\r\n        }\r\n        return map(positions, (position, index) =>\r\n            checkPosition({position, index})\r\n        )\r\n    }\r\n    const createValue = (currentPosition) => {\r\n        const check = currentPosition === 'rejected'\r\n        const val = positions.find((pos) => pos.position === currentPosition)\r\n        return {\r\n            value: val?.position,\r\n            label: (\r\n                <span className='flex'>\r\n                    {check ? (\r\n                        <IoCloseCircleSharp size={17} color={'red'} />\r\n                    ) : (\r\n                        <IoCheckmarkCircleSharp size={17} color='green' />\r\n                    )}{' '}\r\n                    <span className='pl-2'>\r\n                        {check\r\n                            ? 'red etilgan'\r\n                            : currentPosition === 'completed'\r\n                            ? 'yakunlangan'\r\n                            : val?.name}\r\n                    </span>\r\n                </span>\r\n            ),\r\n            isDisabled: true,\r\n        }\r\n    }\r\n    const handleChange = (e, order, index) => {\r\n        const val = e.value\r\n        if (val === 'rejected' || val === 'accepted' || val === 'completed') {\r\n            updatePosition(e.value, order._id, index)\r\n        }\r\n        if (val === 'send') {\r\n            linkToSale(order, val)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-end '>\r\n                        <div className='flex justify-between'>\r\n                            <span>\r\n                                {new Date(item?.createdAt).toLocaleTimeString()}\r\n                            </span>\r\n                            <span>\r\n                                {new Date(item?.createdAt).toLocaleDateString()}\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                    <td className='td text-end'>{item?.market?.name}</td>\r\n                    <td className='td text-start'>{item?.market?.inn}</td>\r\n                    <td className='td text-end'>{item?.id}</td>\r\n                    <td className='td text-end'>{item?.products?.length}</td>\r\n                    <td className='td text-end font-bold'>\r\n                        {currency === 'UZS'\r\n                            ? item?.totalpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.totalprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(item)}\r\n                            />\r\n                            {\r\n                                <TableBtn\r\n                                    type={'edit'}\r\n                                    bgcolor={'bg-warning-500'}\r\n                                    onClick={() => linkToSale(item)}\r\n                                    isDisabled={item?.position !== 'delivered'}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0'>\r\n                        <SelectTable\r\n                            options={createOptions(item.position)}\r\n                            value={createValue(item.position)}\r\n                            onSelect={(e) => handleChange(e, item, index)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {map} from 'lodash'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {IoAdd, IoEye, IoEyeOff, IoRemove} from 'react-icons/io5'\r\nexport const IncomingOrderProductsTableRow = ({\r\n    data,\r\n    currency,\r\n    increment,\r\n    decrement,\r\n    handleDelete,\r\n    handleCountProduct,\r\n    handleUnitPrice,\r\n}) => {\r\n    const [showIncomingPrice, setShowIncomingPrice] = useState([])\r\n    const changeShow = (i) => {\r\n        const price = [...showIncomingPrice]\r\n        price[i] = !price[i]\r\n        setShowIncomingPrice([...price])\r\n    }\r\n    useEffect(() => {\r\n        setShowIncomingPrice(map(data, () => false))\r\n    }, [data])\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>{1 + index}</td>\r\n                    <td className='td text-center'> {item?.product?.code}</td>\r\n                    <td className='td text-left'>{item?.product?.name}</td>\r\n                    <td className='td text-end'>\r\n                        {item?.total?.toLocaleString('ru-Ru')}{' '}\r\n                        {item?.unit?.name}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {item?.pieces?.recived} {item?.unit?.name}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        <span className={'flex gap-[0.6rem] items-center'}>\r\n                            <button\r\n                                onClick={() => decrement(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-error-500 hover:bg-error-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoRemove size={'0.875rem'} />\r\n                            </button>\r\n                            <TableInput\r\n                                value={item?.pieces?.send}\r\n                                onChange={(e) => {\r\n                                    handleCountProduct(e, item.product._id)\r\n                                }}\r\n                                type={'number'}\r\n                            />\r\n                            <button\r\n                                onClick={() => increment(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-success-500 hover:bg-success-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoAdd size={'0.875rem'} />\r\n                            </button>\r\n                        </span>\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        <TableInput\r\n                            value={\r\n                                currency === 'UZS'\r\n                                    ? item?.unitpriceuzs\r\n                                    : item?.unitprice\r\n                            }\r\n                            onChange={(e) =>\r\n                                handleUnitPrice(e, item.product._id)\r\n                            }\r\n                            type={'number'}\r\n                        />\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {currency === 'UZS'\r\n                            ? item?.totalpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.totalprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td'>\r\n                        <div className='flex items-center justify-center gap-[5px]'>\r\n                            <TableBtn\r\n                                onClick={() => handleDelete(index)}\r\n                                type={'delete'}\r\n                                bgcolor={'bg-error-500'}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                    <td className='td border-r-0 text-success-500'>\r\n                        <div className='flex justify-between'>\r\n                            <button onClick={() => changeShow(index)}>\r\n                                {showIncomingPrice[index] ? (\r\n                                    <IoEye />\r\n                                ) : (\r\n                                    <IoEyeOff />\r\n                                )}\r\n                            </button>\r\n                            <span className='min-w-fit'>\r\n                                {showIncomingPrice[index]\r\n                                    ? currency === 'UZS'\r\n                                        ? item?.incomingpriceuzs?.toLocaleString(\r\n                                              'ru-Ru'\r\n                                          ) + ' UZS'\r\n                                        : item?.incomingprice?.toLocaleString(\r\n                                              'ru-Ru'\r\n                                          ) + ' USD'\r\n                                    : ''}\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {map} from 'lodash'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {IoAdd, IoRemove} from 'react-icons/io5'\r\nexport const ReceiveOrderProductsTableRow = ({\r\n    data,\r\n    currency,\r\n    increment,\r\n    decrement,\r\n    handleCountProduct,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (item, index) => (\r\n                <tr key={index} className='tr'>\r\n                    <td className='td py-2'>{1 + index}</td>\r\n                    <td className='td text-center'>{item?.product?.code}</td>\r\n                    <td className='td text-left'>{item?.product?.name}</td>\r\n                    <td className='td text-end'>\r\n                        {item?.pieces?.recived?.toLocaleString('ru-Ru')}{' '}\r\n                        {item?.unit?.name}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {item?.pieces?.send?.toLocaleString('ru-Ru')}{' '}\r\n                        {item?.unit?.name}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        <span className={'flex gap-[0.6rem] items-center'}>\r\n                            <button\r\n                                onClick={() => decrement(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-error-500 hover:bg-error-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoRemove size={'0.875rem'} />\r\n                            </button>\r\n                            <TableInput\r\n                                value={item?.pieces?.delivered}\r\n                                onChange={(e) =>\r\n                                    handleCountProduct(e, item?.product?._id)\r\n                                }\r\n                                type={'number'}\r\n                            />\r\n                            <button\r\n                                onClick={() => increment(item?.product?._id)}\r\n                                className={\r\n                                    'rounded-[4px] duration-100 bg-success-500 hover:bg-success-600 p-[0.2rem] text-base text-white-900 active:scale-95'\r\n                                }\r\n                            >\r\n                                <IoAdd size={'0.875rem'} />\r\n                            </button>\r\n                        </span>\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {currency === 'UZS'\r\n                            ? item?.unitpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.unitprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-end'>\r\n                        {currency === 'UZS'\r\n                            ? item?.totalpriceuzs?.toLocaleString('ru-Ru')\r\n                            : item?.totalprice?.toLocaleString('ru-Ru')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\nimport TableInput from '../../Inputs/TableInput'\r\nimport {map} from 'lodash'\r\n\r\nconst inputVal = (id, printedData) => {\r\n    let hasData = printedData.filter((p) => p.product._id === id)\r\n    return hasData.length > 0 ? hasData[0].numberOfChecks : ''\r\n}\r\n\r\nexport const LabelsIncome = ({\r\n    data,\r\n    Print,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    changeHandler,\r\n    printedData,\r\n}) => {\r\n    return (\r\n        <>\r\n            {map(data, (product, index) => (\r\n                <tr className='tr' key={product._id}>\r\n                    <td className='td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='td text-center'>{product.category.code}</td>\r\n                    <td className={`td`}>{product.productdata.code}</td>\r\n                    <td className={`td`}>{product.productdata.name}</td>\r\n                    <td className={`td text-right`}>\r\n                        <span className='pointer-events-none'>\r\n                            {product?.pieces.toLocaleString('ru-Ru')}{' '}\r\n                            {product?.unit?.name}\r\n                        </span>\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? product.price.incomingpriceuzs.toLocaleString(\r\n                                  'ru-RU'\r\n                              )\r\n                            : product.price.incomingprice.toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  product.price.incomingpriceuzs * product.pieces\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  product.price.incomingprice * product.pieces\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className={`td text-right`}>\r\n                        {currency === 'UZS'\r\n                            ? product.price.sellingpriceuzs.toLocaleString(\r\n                                  'ru-RU'\r\n                              )\r\n                            : product.price.sellingprice.toLocaleString(\r\n                                  'ru-RU'\r\n                              )}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='td text-right'>\r\n                        {currency === 'UZS'\r\n                            ? (\r\n                                  product.price.sellingpriceuzs * product.pieces\r\n                              ).toLocaleString('ru-RU')\r\n                            : (\r\n                                  product.price.sellingprice * product.pieces\r\n                              ).toLocaleString('ru-RU')}{' '}\r\n                        {currency}\r\n                    </td>\r\n                    <td className='py-[0.25rem] td'>\r\n                        <TableInput\r\n                            onChange={(e) => changeHandler(e, product)}\r\n                            type={'number'}\r\n                            value={inputVal(product._id, printedData)}\r\n                        />\r\n                    </td>\r\n                    <td className='td text-center'>\r\n                        <div className='flex items-center justify-center'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(product, 'single')}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import { uniqueId, map } from 'lodash'\r\nimport React from 'react'\r\nimport { roundUsd, roundUzs } from '../../../App/globalFunctions'\r\nimport TableBtn from '../../Buttons/TableBtn'\r\n\r\nexport const PaymentsSellingTable = ({\r\n    data,\r\n    currentPage,\r\n    countPage,\r\n    currency,\r\n    Print,\r\n    type\r\n}) => {\r\n\r\n    const payDebt = data.reduce((prev, el) => {\r\n        if (!el.totalprice && el.usdpayment) {\r\n            prev += el.usdpayment\r\n        }\r\n        return prev\r\n    }, 0)\r\n    const payDebtUzs = data.reduce((prev, el) => {\r\n        if (!el.totalprice) {\r\n            prev += el.cashuzs + el.carduzs + el.transferuzs\r\n        }\r\n        return prev\r\n    }, 0)\r\n    console.log(data);\r\n    return (\r\n        <>\r\n            {map(data, (sale, index) => (\r\n                <tr className='tr' key={uniqueId('sale')}>\r\n                    <td className='text-left td'>\r\n                        {currentPage * countPage + 1 + index}\r\n                    </td>\r\n                    <td className='text-right td'>\r\n                        {new Date(sale.createdAt).toLocaleDateString()}\r\n                    </td>\r\n                    <td className='text-right td'>{sale.id}</td>\r\n                    <td className='text-right td'>{sale?.client?.name}</td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {sale.cashuzs + sale.carduzs + sale.transferuzs} UZS\r\n                    </td>\r\n                    <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {sale?.usdpayment} USD\r\n                    </td>\r\n                    <td className='text-success-500 text-right td py-[0.625rem] font-bold'>\r\n                        {!sale.totalprice && sale?.usdpayment} USD\r\n                    </td>\r\n                    <td className='text-success-500 text-right td py-[0.625rem] font-bold'>\r\n                        {!sale.totalprice && (sale.cashuzs + sale.carduzs + sale.transferuzs)} UZS\r\n                    </td>\r\n                    {/* <td className='text-right td py-[0.625rem] font-bold'>\r\n                        {sale?.usdpayment < 0 ? sale?.usdpayment : sale.cash < 0 || sale.card < 0 || sale.transfer < 0 ? (<>\r\n                            {currency === 'USD' ? (sale.cash + sale.card + sale.transfer) : (sale.cashuzs + sale.carduzs + sale.transferuzs)}\r\n                        </>) : 0} {' '}\r\n                        {currency}\r\n                    </td> */}\r\n                    <td className='py-[0.375rem] td border-r-0'>\r\n                        <div className='flex items-center justify-center gap-[0.625rem]'>\r\n                            <TableBtn\r\n                                type={'print'}\r\n                                bgcolor={'bg-primary-800'}\r\n                                onClick={() => Print(sale.totalprice ? sale.saleconnector : sale)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            <tr>\r\n                <td colSpan={8}>\r\n                </td>\r\n                <td className='text-right p-2 font-bold text-success-500'>\r\n                    {roundUzs(payDebtUzs).toLocaleString('ru-RU')} UZS <br/>\r\n                    {roundUsd(payDebt).toLocaleString('ru-RU')} USD\r\n                </td>\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n","import { PackmanTableRow } from './TableRows/PackmanTableRow'\r\nimport { SellerTableRow } from './TableRows/SellerTableRow'\r\nimport { CategoryTableRow } from './TableRows/CategoryTableRow'\r\nimport { RegisterIncomingTableRow } from './TableRows/RegisterIncomingTableRow'\r\nimport { InventoriesTableRow } from './TableRows/InventoriesTableRow'\r\nimport { InventoryTableRow } from './TableRows/InventoryTableRow'\r\nimport { ProductReportTableRow } from './TableRows/ProductReportTableRow'\r\nimport { ProductTableRow } from './TableRows/ProductTableRow'\r\nimport { SupplierTableRow } from './TableRows/SupplierTableRow'\r\nimport { UnitTableRow } from './TableRows/UnitTableRow'\r\nimport Thead from './Thead'\r\nimport { IncomingsTableRow } from './TableRows/IncomingsTableRow'\r\nimport { RegisterSaleTableRow } from './TableRows/RegisterSaleTableRow'\r\nimport { TemporaryIncomingsTableRow } from './TableRows/TemporaryIncomingsTableRow'\r\nimport { TemporarySaleTableRow } from './TableRows/TemporarySaleTableRow'\r\nimport { SalesListTableRow } from './TableRows/SalesListTableRow'\r\nimport { ClientTableRow } from './TableRows/ClientTableRow'\r\nimport { ExchangenerateTableRow } from './TableRows/ExchangenerateTableRow'\r\nimport { SaleReturnTableRow } from './TableRows/SaleReturnTableRow'\r\nimport { CashierSaleTableRow } from './TableRows/CashierSaleTableRow'\r\nimport { PaymentsTableRow } from './TableRows/PaymentsTableRow'\r\nimport { IncomeTableRow } from './TableRows/IncomeTableRow'\r\nimport { DebtsTableRow } from './TableRows/DebtsTableRow'\r\nimport { DiscountTableRow } from './TableRows/DiscountTableRow'\r\nimport { ExpensesTableRow } from './TableRows/ExpensesTableRow'\r\nimport { BarcodeTableRow } from './TableRows/BarcodeTableRow.js'\r\nimport { AdminProductTableRow } from './TableRows/AdminProductTableRow'\r\nimport { ReturnProductsTableRow } from './TableRows/ReturnProductsTableRow.js'\r\nimport { GeneralReportTableRow } from './TableRows/GeneralReportTableRow.js'\r\nimport { RegisterSaleTableFooter } from './TableFooters/RegisterSaleTableFooter.js'\r\nimport { FilialShopTableRow } from './TableRows/FilialShopTableRow'\r\nimport DailyReport from './TableRows/DailyReport.js'\r\nimport SupplierIncomingsTableRow from './TableRows/SupplierIncomingsTableRow'\r\nimport { FilialShopDataIdTableRow } from './TableRows/FilialShopDataIdTablerow'\r\nimport { CategoryReportTableRow } from './TableRows/CategoryReportTableRow'\r\nimport { MarketProductsTableRow } from './TableRows/MarketProductsTableRow'\r\nimport { PartnerProductsTableRow } from './TableRows/PartnerProductsTableRow'\r\nimport { RegisterOrdersTableRow } from './TableRows/RegisterOrdersTableRow'\r\nimport { OrderProductsTableRow } from './TableRows/OrderProductsTableRow'\r\nimport { SavedOrdersTableRow } from './TableRows/SavedOrdersTableRow.js'\r\nimport { RegisterIncomingOrdersTableRow } from './TableRows/RegisterIncomingOrdersTableRow.js'\r\nimport { IncomingOrderProductsTableRow } from './TableRows/IncomingOrderProductsTableRow.js'\r\nimport { ReceiveOrderProductsTableRow } from './TableRows/ReceiveOrderProductsTableRow.js'\r\nimport { LabelsIncome } from './TableRows/LabelsIncome'\r\nimport { PaymentsSellingTable } from './TableRows/PaymentsSellingTable'\r\nfunction Table({\r\n    page,\r\n    data,\r\n    headers,\r\n    currentPage,\r\n    countPage,\r\n    Sort,\r\n    Edit,\r\n    Delete,\r\n    currency,\r\n    changeHandler,\r\n    Print,\r\n    inputValue,\r\n    inputDisabled,\r\n    Excel,\r\n    editedIncoming,\r\n    saveEditIncoming,\r\n    sortItem,\r\n    ReturnPayment,\r\n    Save,\r\n    onKeyUp,\r\n    currencyType,\r\n    type,\r\n    Pay,\r\n    isDisabled,\r\n    reports,\r\n    onClickTableRow,\r\n    linkToSellerReports,\r\n    sellers,\r\n    addPlus,\r\n    footer,\r\n    increment,\r\n    decrement,\r\n    lowUnitpriceProducts,\r\n    linkToSupplierReport,\r\n    printedData,\r\n    productminimumpage,\r\n    handleDelete,\r\n    wholeSale,\r\n    handleShowProduct,\r\n    updatePosition,\r\n    handleCountProduct,\r\n    handleUnitPrice,\r\n    selectedFilial,\r\n    editComment,\r\n    startDate,\r\n    endDate\r\n}) {\r\n    const checkRows = () => {\r\n        switch (page) {\r\n            case 'product':\r\n                return (\r\n                    <ProductTableRow\r\n                        currencyType={currencyType}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        currency={currency}\r\n                        productminimumpage={productminimumpage}\r\n                    />\r\n                )\r\n            case 'adminProduct':\r\n                return (\r\n                    <AdminProductTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        onClickTableRow={onClickTableRow}\r\n                        handleDelete={handleDelete}\r\n                    />\r\n                )\r\n            case 'category':\r\n                return (\r\n                    <CategoryTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        endDate={endDate}\r\n                        startDate={startDate}\r\n                    />\r\n                )\r\n            case 'unit':\r\n                return (\r\n                    <UnitTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                    />\r\n                )\r\n            case 'supplier':\r\n                return (\r\n                    <SupplierTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        linkToSupplierReport={linkToSupplierReport}\r\n                    />\r\n                )\r\n            case 'productreport':\r\n                return (\r\n                    <ProductReportTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        currency={currency}\r\n                        changeHandler={changeHandler}\r\n                        Print={Print}\r\n                        printedData={printedData}\r\n                    />\r\n                )\r\n            case 'labelsincome':\r\n                return (\r\n                    <LabelsIncome\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        currency={currency}\r\n                        changeHandler={changeHandler}\r\n                        Print={Print}\r\n                        printedData={printedData}\r\n                    />\r\n                )\r\n            case 'registerincoming':\r\n                return (\r\n                    <RegisterIncomingTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        changeHandler={changeHandler}\r\n                        Delete={Delete}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            case 'inventory':\r\n                return (\r\n                    <InventoryTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        changeHandler={changeHandler}\r\n                        inputDisabled={inputDisabled}\r\n                        Save={Save}\r\n                        onKeyUp={onKeyUp}\r\n                    />\r\n                )\r\n            case 'inventories':\r\n                return (\r\n                    <InventoriesTableRow\r\n                        isDisabled={isDisabled}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Excel={Excel}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'incomings':\r\n                return (\r\n                    <IncomingsTableRow\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        changeHandler={changeHandler}\r\n                        editedIncoming={editedIncoming}\r\n                        saveEditIncoming={saveEditIncoming}\r\n                        data={data}\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        onKeyUp={onKeyUp}\r\n                    />\r\n                )\r\n            case 'registersale':\r\n                return (\r\n                    <RegisterSaleTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        Delete={Delete}\r\n                        changeHandler={changeHandler}\r\n                        decrement={decrement}\r\n                        increment={increment}\r\n                        lowUnitpriceProducts={lowUnitpriceProducts}\r\n                        wholeSale={wholeSale}\r\n                        selectedFilial={selectedFilial}\r\n                    />\r\n                )\r\n            case 'temporaryincoming':\r\n                return (\r\n                    <TemporaryIncomingsTableRow\r\n                        data={data}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        Print={Print}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            case 'temporarysale':\r\n                return (\r\n                    <TemporarySaleTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'saleslist':\r\n                return (\r\n                    <SalesListTableRow\r\n                        data={data}\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Print={Print}\r\n                        ReturnPayment={ReturnPayment}\r\n                        sellers={sellers}\r\n                        addPlus={addPlus}\r\n                        editComment={editComment}\r\n                    />\r\n                )\r\n            case 'client':\r\n                return (\r\n                    <ClientTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'packman':\r\n                return (\r\n                    <PackmanTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                    />\r\n                )\r\n            case 'seller':\r\n                return (\r\n                    <SellerTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        linkToSellerReports={linkToSellerReports}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            case 'exchange':\r\n                return (\r\n                    <ExchangenerateTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                    />\r\n                )\r\n            case 'backproduct':\r\n                return (\r\n                    <SaleReturnTableRow\r\n                        onKeyUp={onKeyUp}\r\n                        changeHandler={changeHandler}\r\n                        inputValue={inputValue}\r\n                        currency={currency}\r\n                        data={data}\r\n                    />\r\n                )\r\n            case 'sale':\r\n                return (\r\n                    <CashierSaleTableRow\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        data={data}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'payments':\r\n                return (\r\n                    <PaymentsTableRow\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        data={data}\r\n                        type={type}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'payments_selling':\r\n                return (\r\n                    <PaymentsSellingTable\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        data={data}\r\n                        type={type}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'card':\r\n                return (\r\n                    <PaymentsTableRow\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        data={data}\r\n                        type={type}\r\n                    />\r\n                )\r\n            case 'transfer':\r\n                return (\r\n                    <PaymentsTableRow\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        data={data}\r\n                        type={type}\r\n                    />\r\n                )\r\n            case 'income':\r\n                return (\r\n                    <IncomeTableRow\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        data={data}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'debts':\r\n                return (\r\n                    <DebtsTableRow\r\n                        data={data}\r\n                        currency={currency}\r\n                        Pay={Pay}\r\n                        Print={Print}\r\n                        Edit={Edit}\r\n                    />\r\n                )\r\n            case 'discounts':\r\n                return (\r\n                    <DiscountTableRow\r\n                        data={data}\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                    />\r\n                )\r\n            case 'expenses':\r\n                return (\r\n                    <ExpensesTableRow\r\n                        data={data}\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Delete={Delete}\r\n                        reports={reports}\r\n                    />\r\n                )\r\n            case 'barcode':\r\n                return (\r\n                    <BarcodeTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Edit={Edit}\r\n                        Delete={Delete}\r\n                    />\r\n                )\r\n            case 'backproducts':\r\n                return (\r\n                    <ReturnProductsTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'filialShop':\r\n                return (\r\n                    <FilialShopTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            case 'filialShopDataId':\r\n                return (\r\n                    <FilialShopDataIdTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            case 'generalreport':\r\n                return <GeneralReportTableRow data={data} currency={currency} />\r\n            case 'dailyreport':\r\n                return <DailyReport data={data} />\r\n            case 'incomingsupplier':\r\n                return (\r\n                    <SupplierIncomingsTableRow\r\n                        data={data}\r\n                        currency={currency}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Pay={Pay}\r\n                    />\r\n                )\r\n            case 'categoryreport':\r\n                return <CategoryReportTableRow data={data} />\r\n            case 'marketProducts':\r\n                return (\r\n                    <MarketProductsTableRow\r\n                        handleShowProduct={handleShowProduct}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                    />\r\n                )\r\n            case 'partnerProducts':\r\n                return (\r\n                    <PartnerProductsTableRow\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                    />\r\n                )\r\n            case 'registerOrder':\r\n                return (\r\n                    <RegisterOrdersTableRow\r\n                        currency={currency}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Print={Print}\r\n                    />\r\n                )\r\n            case 'registerIncomingOrder':\r\n                return (\r\n                    <RegisterIncomingOrdersTableRow\r\n                        currency={currency}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        Print={Print}\r\n                        updatePosition={updatePosition}\r\n                    />\r\n                )\r\n            case 'orderProducts':\r\n                return (\r\n                    <OrderProductsTableRow\r\n                        increment={increment}\r\n                        decrement={decrement}\r\n                        currency={currency}\r\n                        data={data}\r\n                        handleDelete={handleDelete}\r\n                        handleCountProduct={handleCountProduct}\r\n                    />\r\n                )\r\n            case 'receiveOrderProducts':\r\n                return (\r\n                    <ReceiveOrderProductsTableRow\r\n                        increment={increment}\r\n                        decrement={decrement}\r\n                        currency={currency}\r\n                        data={data}\r\n                        handleCountProduct={handleCountProduct}\r\n                    />\r\n                )\r\n            case 'incomingOrderSendProduct':\r\n                return (\r\n                    <IncomingOrderProductsTableRow\r\n                        data={data}\r\n                        increment={increment}\r\n                        decrement={decrement}\r\n                        currency={currency}\r\n                        handleDelete={handleDelete}\r\n                        handleCountProduct={handleCountProduct}\r\n                        handleUnitPrice={handleUnitPrice}\r\n                    />\r\n                )\r\n            case 'savedOrders':\r\n                return (\r\n                    <SavedOrdersTableRow\r\n                        Delete={Delete}\r\n                        data={data}\r\n                        currentPage={currentPage}\r\n                        countPage={countPage}\r\n                        handlePrint={Print}\r\n                    />\r\n                )\r\n            default:\r\n                return (\r\n                    <tr>\r\n                        <td colSpan={7} className='text-black-500 py-2 pl-4'>\r\n                            Ushbu nomdagi javval mavjud emas\r\n                        </td>\r\n                    </tr>\r\n                )\r\n        }\r\n    }\r\n\r\n    const checkFooters = () => {\r\n        switch (footer) {\r\n            case 'registersale':\r\n                return (\r\n                    <RegisterSaleTableFooter\r\n                        saleproducts={data}\r\n                        currency={currency}\r\n                    />\r\n                )\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n    return (\r\n        <table className='overflow-x-auto w-full'>\r\n            <thead className='rounded-t-lg sticky top-0'>\r\n                <Thead headers={headers} Sort={Sort} sortItem={sortItem} />\r\n            </thead>\r\n            <tbody>{checkRows()}</tbody>\r\n            {footer && <tfoot>{checkFooters()}</tfoot>}\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table\r\n"],"names":["universalSort","data","setData","key","sort","prevData","keys","split","orderBy","_toConsumableArray","item","length","UsdToUzs","val","currency","Math","round","UzsToUsd","checkEmptyString","values","result","failed","message","i","regexForEmptyString","test","value","exportExcel","fileName","headers","json","wscols","Object","map","index","maxLength","max","apply","x","toString","wch","wb","XLSX","book_new","ws","json_to_sheet","sheet_add_aoa","sheet_add_json","origin","skipHeader","book_append_sheet","concat","Date","toLocaleDateString","roundUzs","roundUsd","reduceSumm","arr","reduce","prev","current","currentExchangerate","uzs","usd","_ref","onChange","label","id","_jsxs","className","children","_jsx","type","checked","htmlFor","IoCheckmark","size","placeholder","disabled","onKeyUp","onWheel","e","target","blur","min","regexForTypeNumber","DropdownIcon","props","components","DropdownIndicator","_objectSpread","IoCaretDown","color","container","styles","height","control","_ref4","isDisabled","width","padding","borderRadius","fontSize","fontWeight","outline","boxShadow","cursor","backgroundColor","border","option","_ref2","isFocused","isSelected","transition","overflow","menu","zIndex","singleValue","lineHeight","margin","valueContainer","dropdownIndicator","paddingRight","_ref3","input","display","onSelect","options","Select","CustomStyle","defaultValue","IndicatorSeparator","onClick","bgcolor","IoTrashOutline","IoCreateOutline","IoPrint","IoSave","SiMicrosoftexcel","IoAdd","IoSwapHorizontal","FaMoneyBill","IoInformation","IoDocument","chooseIcon","PackmanTableRow","currentPage","countPage","Edit","Delete","_Fragment","packman","name","TableBtn","uniqueId","SellerTableRow","linkToSellerReports","seller","_seller$totalsales","_seller$totalsalesuzs","firstname","lastname","phone","sales","totalsales","toLocaleString","totalsalesuzs","profit","profituzs","_id","CategoryTableRow","startDate","endDate","navigate","useNavigate","currencyType","useSelector","state","category","code","totalproducts","RegisterIncomingTableRow","changeHandler","product","_product$product","_product$product2","TableInput","pieces","unitprice","unitpriceuzs","oldprice","oldpriceuzs","totalprice","totalpriceuzs","sellingprice","sellingpriceuzs","tradeprice","tradepriceuzs","StatusIcon","status","Link","to","IoHourglass","InventoriesTableRow","Print","Excel","inventory","createdAt","inventories","completed","InventoryTableRow","inputDisabled","Save","productdata","total","inventorycount","productcount","unit","comment","inputVal","printedData","hasData","filter","p","numberOfChecks","ProductReportTableRow","_product$unit","price","incomingpriceuzs","incomingprice","ProductTableRow","productminimumpage","_product$category","_product$category2","_product$category3","_product$price","_product$price2","_product$price3","_product$price4","_product$price5","_product$price6","_product$price7","_product$price8","packcount","style","isUsd","minimumcount","SupplierTableRow","linkToSupplierReport","supplier","UnitTableRow","Sort","sortItem","pos","roundedStyle","header","scope","title","FaSortUp","transform","FaSortDown","IncomingsTableRow","editedIncoming","saveEditIncoming","incoming","_incoming$pieces","_incoming$unit","RegisterSaleTableRow","lowUnitpriceProducts","increment","decrement","wholeSale","_useState","useTranslation","t","registerSelling","filials","login","market","useState","_useState2","_slicedToArray","showIncomingPrice","setShowIncomingPrice","useEffect","Checkbox","isPackcount","totalpackcount","toFixed","packcountpieces","changeShow","IoEye","IoEyeOff","TemporaryIncomingsTableRow","temporary","incomings","toLocaleTimeString","TemporarySaleTableRow","_user$type","user","link","toLowerCase","userValue","clientValue","packmanValue","tableProducts","totalPrice","totalPriceUzs","linkToSale","SalesListTableRow","sellers","editComment","addPlus","location","useLocation","saleconnector","_saleconnector$client","updatedAt","client","products","discounts","el","discountuzs","discount","debtuzs","debtusd","dailyconnectors","pathname","includes","returnProducts","replace","ClientTableRow","_client$saleconnector","_client$saleconnector2","_client$saleconnector3","_client$saleconnector4","_client$saleconnector5","_client$saleconnector6","_client$saleconnector7","_client$saleconnector8","universalToast","ExchangenerateTableRow","exchange","exchangerate","SaleReturnTableRow","salereturn","CashierSaleTableRow","calculateTotalPrice","datas","property","summ","_saleconnector$paymen","_saleconnector$paymen2","_saleconnector$paymen3","_saleconnector$paymen4","_saleconnector$paymen5","_saleconnector$paymen6","Number","payment","cash","cashuzs","card","carduzs","transfer","transferuzs","PaymentsTableRow","payDebt","usdpayment","payDebtUzs","console","log","sale","_sale$client","colSpan","IncomeTableRow","income","totalincomingprice","totalincomingpriceuzs","dailyconnector","DebtsTableRow","Pay","isEditComment","setIsEditComment","debt","onMouseOver","onMouseOut","debtid","DiscountTableRow","ExpensesTableRow","reports","typeofexpense","expense","sum","sumuzs","BarcodeTableRow","barcode","AdminProductTableRow","onClickTableRow","handleDelete","_market$director","_market$director2","image","src","alt","toUpperCase","director","phone1","mainmarket","stopPropagation","ReturnProductsTableRow","connector","_connector$saleconnec","_connector$saleconnec2","_connector$saleconnec3","count","backuzs","back","GeneralReportTableRow","_data$salesCount","_data$saleProducts","_data$totalpriceuzs","_data$totalprice","salesCount","saleProducts","RegisterSaleTableFooter","saleproducts","FilialShopTableRow","totalsellingpriceuzs","totalsellingprice","IoArrowRedoCircleSharp","dailyReport","_dailyReport$saleconn","_dailyReport$saleconn2","_dailyReport$saleconn3","_dailyReport$product","_dailyReport$product$","_dailyReport$user","hour","minute","hourCycle","previous","next","changeCurrency","FilialShopDataIdTableRow","_item$category","_item$productdata","_item$productdata2","_item$price","_item$price2","_item$price3","_item$price4","_item$price5","_item$price6","CategoryReportTableRow","totalsaleproducts","MarketProductsTableRow","handleShowProduct","partner","useParams","_product$productdata","_product$productdata2","_product$productdata3","_product$connections","ProductCheckbox","connections","some","connection","PartnerProductsTableRow","isSearchable","RegisterOrdersTableRow","position","order","positions","createOptions","currentPosition","hasEqual","check","IoCheckmarkCircleSharp","checkPosition","createValue","find","IoCloseCircleSharp","_item$sender","_item$sender2","_item$products","_item$totalpriceuzs","_item$totalprice","sender","inn","SelectTable","handleChange","OrderProductsTableRow","handleCountProduct","_item$product","_item$product2","_item$total","_item$unit","_item$unitpriceuzs","_item$unitprice","_item$product3","IoRemove","recived","_item$product4","_item$product5","SavedOrdersTableRow","handlePrint","_item$temporary","_item$temporary$partn","_item$temporary2","_item$temporary2$tabl","_item$temporary3","_item$temporary3$tota","_item$temporary4","_item$temporary4$tota","RegisterIncomingOrdersTableRow","updatePosition","_item$market","_item$market2","IncomingOrderProductsTableRow","handleUnitPrice","_item$pieces","_item$unit2","_item$pieces2","_item$incomingpriceuz","_item$incomingprice","send","ReceiveOrderProductsTableRow","_item$pieces$recived","_item$pieces2$send","_item$pieces3","delivered","LabelsIncome","PaymentsSellingTable","page","inputValue","ReturnPayment","footer","selectedFilial","Thead","DailyReport","SupplierIncomingsTableRow","checkRows"],"sourceRoot":""}