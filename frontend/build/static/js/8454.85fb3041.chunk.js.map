{"version":3,"file":"static/js/8454.85fb3041.chunk.js","mappings":"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","sources":["Pages/Inventory/Inventory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Table from '../../Components/Table/Table'\r\nimport Pagination from '../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport { motion } from 'framer-motion'\r\nimport {\r\n    clearCompleteSuccessInventory,\r\n    clearErrorInventories,\r\n    clearSearchedInventories,\r\n    clearSuccessUpdateInventory,\r\n    complateInventory,\r\n    getInventories,\r\n    getInventoriesByFilter,\r\n    updateInventory\r\n} from './inventorySlice'\r\nimport { universalSort } from '../../App/globalFunctions.js'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    successCompleteInventoryMessage,\r\n    successUpdateInventoryMessage,\r\n    universalToast\r\n} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next';\r\nimport {filter} from \"lodash\"   \r\nfunction Inventory() {\r\n    const { t } = useTranslation(['common'])\r\n    const headers = [\r\n        { styles: 'w-[10%]', filter: '', title: 'â„–' },\r\n        { styles: 'w-[10%]', filter: 'category.code', title: t('Kategoriyasi') },\r\n        { styles: 'w-[10%]', filter: 'productdata.code', title: t('Kodi') },\r\n        { styles: 'w-[20%]', filter: 'productdata.name', title: t('Nomi') },\r\n        { styles: 'w-[10%] text-center', title: t('Dastlabki') },\r\n        { styles: 'w-[10%] text-center', filter: '', title: t('Sanoq') },\r\n        { styles: 'w-[10%] text-center', filter: '', title: t('Farq') },\r\n        { styles: '', filter: '', title: t('Izoh') },\r\n        { styles: '', filter: '', title: ' ' }\r\n    ]\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        inventories,\r\n        total,\r\n        searchedInventories,\r\n        totalSearched,\r\n        errorInventories,\r\n        loading,\r\n        successUpdateInventory,\r\n        successComplateInventory\r\n    } = useSelector((state) => state.inventories)\r\n    const navigate = useNavigate()\r\n    const [data, setData] = useState(inventories)\r\n    const [searchedData, setSearchedData] = useState(searchedInventories)\r\n    const [searchByCategory, setSearchByCategory] = useState('')\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [searchByCode, setSearchByCode] = useState('')\r\n    const [searchByName, setSearchByName] = useState('')\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [sorItem, setSorItem] = useState({\r\n        filter: '',\r\n        sort: '',\r\n        count: 0\r\n    })\r\n\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    // handle change of search inputs\r\n    const filterByCategory = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.replace(/\\s+/g, ' ').trim()\r\n        setSearchByCategory(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.category.code.includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n    const filterByCode = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.replace(/\\s+/g, ' ').trim()\r\n        setSearchByCode(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.productdata.code.includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n    const filterByName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setSearchByName(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.productdata.name\r\n                    .toLowerCase()\r\n                    .includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n\r\n    // filter by total\r\n    const filterByTotal = ({ value }) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n    const filterData = (filterKey) => {\r\n        if (filterKey === sorItem.filter) {\r\n            switch (sorItem.count) {\r\n                case 1:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '1',\r\n                        count: 2\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        1,\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n                    break\r\n                case 2:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '',\r\n                        count: 0\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        '',\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n                    break\r\n                default:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '-1',\r\n                        count: 1\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        -1,\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n            }\r\n        } else {\r\n            setSorItem({\r\n                filter: filterKey,\r\n                sort: '-1',\r\n                count: 1\r\n            })\r\n            universalSort(\r\n                searchedData.length > 0 ? searchedData : data,\r\n                searchedData.length > 0 ? setSearchedData : setData,\r\n                filterKey,\r\n                -1,\r\n                searchedData ? searchedInventories : inventories,\r\n                searchedData.length > 0\r\n            )\r\n        }\r\n    }\r\n    const filterByCodeAndNameAndCategoryWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setCurrentPage(0)\r\n            const body = {\r\n                currentPage: 0,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                    code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                    category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(getInventoriesByFilter(body))\r\n        }\r\n    }\r\n    const changeOfInventoryCount = (e, index, product, type) => {\r\n        let currentInventories = searchedData.length\r\n            ? [...searchedData]\r\n            : [...data]\r\n        const val = e.target.value\r\n        let inventory = {\r\n            ...currentInventories[index]\r\n        }\r\n        if (type === 'count') {\r\n            inventory.inventory = {\r\n                ...inventory.inventory,\r\n                inventorycount: parseInt(val),\r\n                productcount: product.total\r\n            }\r\n        } else {\r\n            inventory.inventory = {\r\n                ...inventory.inventory,\r\n                comment: val\r\n            }\r\n        }\r\n        currentInventories[index] = { ...inventory }\r\n        searchedData.length\r\n            ? setSearchedData([...currentInventories])\r\n            : setData([...currentInventories])\r\n    }\r\n    const saveInventory = (index) => {\r\n        const body = {\r\n            inventory: searchedData.length\r\n                ? { ...searchedData[index].inventory }\r\n                : { ...data[index].inventory },\r\n            currentPage: 0,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(updateInventory(body))\r\n    }\r\n    const saveOnEnter = (e, index) => {\r\n        if (e.key === 'Enter') saveInventory(index)\r\n    }\r\n    const approveCompleteInventory = () => {\r\n        dispatch(complateInventory())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (errorInventories) {\r\n            universalToast(errorInventories, 'error')\r\n            dispatch(clearErrorInventories())\r\n        }\r\n        if (successUpdateInventory) {\r\n            successUpdateInventoryMessage()\r\n            dispatch(clearSuccessUpdateInventory())\r\n        }\r\n        if (successComplateInventory) {\r\n            successCompleteInventoryMessage()\r\n            dispatch(clearCompleteSuccessInventory())\r\n            navigate('/maxsulotlar/inventarizatsiya/inventarizatsiyalar')\r\n        }\r\n    }, [\r\n        errorInventories,\r\n        dispatch,\r\n        successUpdateInventory,\r\n        successComplateInventory,\r\n        navigate\r\n    ])\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(getInventories(body))\r\n        //    eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [currentPage, showByTotal, dispatch])\r\n    useEffect(() => {\r\n        setData(inventories)\r\n    }, [inventories])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n    useEffect(() => {\r\n        setSearchedData(searchedInventories)\r\n    }, [searchedInventories])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: { opacity: 1, height: 'auto' },\r\n                collapsed: { opacity: 0, height: 0 }\r\n            }}\r\n            transition={{ duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98] }}>\r\n            <UniversalModal\r\n                body='complete'\r\n                toggleModal={toggleModal}\r\n                closeModal={toggleModal}\r\n                isOpen={modalVisible}\r\n                headerText={\r\n                    t('Diqqat! Inventarizatsiya yakunlanishini tasdiqlaysizmi?')\r\n                }\r\n                approveFunction={approveCompleteInventory}\r\n            />\r\n            <div className='inverterizationHead mainPadding'>\r\n                <div className='inverterizationText'>{t(\"Inventarizatsiya\")}</div>\r\n                <div>\r\n                    {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                        <Pagination\r\n                            countPage={Number(showByTotal)}\r\n                            totalDatas={totalSearched || filteredDataTotal}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <SearchForm\r\n                filterBy={['total', 'category', 'code', 'name', 'confirmBtn']}\r\n                searchByCategory={searchByCategory}\r\n                filterByCategory={filterByCategory}\r\n                filterByCode={filterByCode}\r\n                filterByName={filterByName}\r\n                searchByCode={searchByCode}\r\n                searchByName={searchByName}\r\n                filterByTotal={filterByTotal}\r\n                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                    filterByCodeAndNameAndCategoryWhenPressEnter\r\n                }\r\n                clickConfirmBtn={toggleModal}\r\n            />\r\n\r\n            <div className='tableContainerPadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={'Maxsulotlar mavjud emas'} />\r\n                ) : (\r\n                    <Table\r\n                        sortItem={sorItem}\r\n                        Sort={filterData}\r\n                        page='inventory'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        changeHandler={changeOfInventoryCount}\r\n                        Save={saveInventory}\r\n                        onKeyUp={saveOnEnter}\r\n                    />\r\n                )}\r\n            </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Inventory\r\n"],"names":["t","useTranslation","headers","styles","filter","title","dispatch","useDispatch","_useSelector","useSelector","state","inventories","total","searchedInventories","totalSearched","errorInventories","loading","successUpdateInventory","successComplateInventory","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","searchedData","setSearchedData","_useState5","_useState6","searchByCategory","setSearchByCategory","_useState7","_useState8","filteredDataTotal","setFilteredDataTotal","_useState9","_useState10","showByTotal","setShowByTotal","_useState11","_useState12","currentPage","setCurrentPage","_useState13","_useState14","searchByCode","setSearchByCode","_useState15","_useState16","searchByName","setSearchByName","_useState17","_useState18","modalVisible","setModalVisible","_useState19","sort","count","_useState20","sorItem","setSorItem","toggleModal","saveInventory","index","body","inventory","length","_objectSpread","countPage","search","name","replace","trim","code","category","updateInventory","useEffect","universalToast","clearErrorInventories","successUpdateInventoryMessage","clearSuccessUpdateInventory","successCompleteInventoryMessage","clearCompleteSuccessInventory","getInventories","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","UniversalModal","closeModal","isOpen","headerText","approveFunction","complateInventory","className","Pagination","Number","totalDatas","SearchForm","filterBy","filterByCategory","e","val","target","value","valForSearch","clearSearchedInventories","filteredInventories","includes","filterByCode","productdata","filterByName","toLowerCase","filterByTotal","_ref","filterByCodeAndNameAndCategoryWhenPressEnter","key","getInventoriesByFilter","clickConfirmBtn","Spinner","NotFind","text","Table","sortItem","Sort","filterKey","universalSort","page","changeHandler","product","type","currentInventories","_toConsumableArray","inventorycount","parseInt","productcount","comment","Save","onKeyUp"],"sourceRoot":""}