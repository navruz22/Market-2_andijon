{"version":3,"file":"static/js/7536.512d01a5.chunk.js","mappings":"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","sources":["Pages/Packman/Packman.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport Button from '../../Components/Buttons/BtnAddRemove'\r\nimport Table from '../../Components/Table/Table'\r\nimport FieldContainer from '../../Components/FieldContainer/FieldContainer'\r\nimport Pagination from '../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal'\r\nimport Spinner from '../../Components/Spinner/SmallLoader'\r\nimport NotFind from '../../Components/NotFind/NotFind'\r\nimport {motion} from 'framer-motion'\r\nimport {\r\n    successAddPackmanMessage,\r\n    successDeletePackmanMessage,\r\n    successUpdatePackmanMessage,\r\n    universalToast,\r\n    warningEmptyInput\r\n} from '../../Components/ToastMessages/ToastMessages'\r\nimport {\r\n    addPackman,\r\n    clearErrorPackmans,\r\n    clearSearchedPackmans,\r\n    clearSuccessAddPackmans,\r\n    clearSuccessDeletePackmans,\r\n    clearSuccessUpdatePackmans,\r\n    deletePackman,\r\n    getPackmans,\r\n    getPackmansByFilter,\r\n    updatePackman\r\n} from './packmanSlice'\r\nimport {checkEmptyString} from '../../App/globalFunctions.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {filter} from 'lodash'\r\n\r\nfunction Packman() {\r\n    const {t} = useTranslation(['common'])\r\n    const dispatch = useDispatch()\r\n    const {\r\n        errorPackmans,\r\n        packmans,\r\n        successAddPackman,\r\n        successUpdatePackman,\r\n        successDeletePackman,\r\n        loading,\r\n        searchedPackmans,\r\n        total,\r\n        totalSearched\r\n    } = useSelector((state) => state.packmans)\r\n\r\n    const headers = [\r\n        {styles: 'w-[10%] text-start', filter: '', title: 'â„–'},\r\n        {styles: 'w-[80%] text-start', filter: '', title: t('Agentlar')},\r\n        {styles: 'w-[10%]', filter: '', title: ' '}\r\n    ]\r\n\r\n    //states\r\n    const [data, setData] = useState([])\r\n    const [searchedData, setSearchedData] = useState('')\r\n    const [packmanName, setPackmanName] = useState('')\r\n    const [currentPackman, setCurrentPackman] = useState('')\r\n    const [deletedPackman, setDeletedPackman] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [stickyForm, setStickyForm] = useState(false)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    // handle changed input\r\n    const handleChangePackmanName = (e) => {\r\n        setPackmanName(e.target.value)\r\n    }\r\n\r\n    // table edit and delete\r\n    const handleEditPackman = (packman) => {\r\n        setCurrentPackman(packman)\r\n        setPackmanName(packman.name)\r\n        setStickyForm(true)\r\n    }\r\n    const handleDeletePackman = (packman) => {\r\n        setDeletedPackman(packman)\r\n        toggleModal()\r\n    }\r\n\r\n    const handleClickApproveToDelete = () => {\r\n        const body = {\r\n            _id: deletedPackman._id,\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(deletePackman(body))\r\n        handleClickCancelToDelete()\r\n    }\r\n\r\n    const handleClickCancelToDelete = () => {\r\n        setModalVisible(false)\r\n        setDeletedPackman(null)\r\n    }\r\n\r\n    // handle change of inputs\r\n\r\n    const addNewPackman = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString([\r\n            {\r\n                value: packmanName,\r\n                message: t('Agent ismi')\r\n            }\r\n        ])\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                name: packmanName,\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(addPackman(body))\r\n            setPackmanName('')\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString([\r\n            {\r\n                value: packmanName,\r\n                message: t('Agent ismi')\r\n            }\r\n        ])\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                name: packmanName,\r\n                _id: currentPackman._id,\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                },\r\n                market: currentPackman.market\r\n            }\r\n            dispatch(updatePackman(body))\r\n        }\r\n    }\r\n\r\n    const clearForm = (e) => {\r\n        e && e.preventDefault()\r\n        setPackmanName('')\r\n        setStickyForm(false)\r\n        setDeletedPackman(null)\r\n        setCurrentPackman(null)\r\n    }\r\n\r\n    //filter by total\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n\r\n    // handle change of search inputs\r\n    const filterByName = (e) => {\r\n        let val = e.target.value\r\n        setSearchByName(val)\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n        dispatch(clearSearchedPackmans())\r\n        if (valForSearch === '') {\r\n            setData(packmans)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredPackmans = filter(packmans, (packman) => {\r\n                return packman.name.toLowerCase().includes(valForSearch)\r\n            })\r\n            setData(filteredPackmans)\r\n            setFilteredDataTotal(filteredPackmans.length)\r\n        }\r\n    }\r\n\r\n    const filterByNameWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            const body = {\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(getPackmansByFilter(body))\r\n        }\r\n    }\r\n\r\n    // useEffects\r\n    useEffect(() => {\r\n        if (errorPackmans) {\r\n            universalToast(errorPackmans, 'error')\r\n            dispatch(clearErrorPackmans())\r\n        }\r\n        if (successAddPackman) {\r\n            successAddPackmanMessage()\r\n            dispatch(clearSuccessAddPackmans())\r\n            clearForm()\r\n        }\r\n        if (successUpdatePackman) {\r\n            successUpdatePackmanMessage()\r\n            dispatch(clearSuccessUpdatePackmans())\r\n            setCurrentPackman('')\r\n            setStickyForm(false)\r\n            clearForm()\r\n        }\r\n        if (successDeletePackman) {\r\n            successDeletePackmanMessage()\r\n            dispatch(clearSuccessDeletePackmans())\r\n            clearForm()\r\n        }\r\n    }, [\r\n        dispatch,\r\n        errorPackmans,\r\n        successAddPackman,\r\n        successUpdatePackman,\r\n        successDeletePackman\r\n    ])\r\n\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(getPackmans(body))\r\n        //    eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, showByTotal, currentPage])\r\n\r\n    useEffect(() => {\r\n        setData(packmans)\r\n    }, [packmans])\r\n\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n\r\n    useEffect(() => {\r\n        setSearchedData(searchedPackmans)\r\n    }, [searchedPackmans])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: {opacity: 1, height: 'auto'},\r\n                collapsed: {opacity: 0, height: 0}\r\n            }}\r\n            transition={{duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98]}}\r\n        >\r\n            <UniversalModal\r\n                headerText={`${deletedPackman && deletedPackman.name\r\n                } ${t('ismli agentni o\\'chirishni tasdiqlaysizmi?')}`}\r\n                title={t('O\\'chirilgan agentni tiklashning imkoni mavjud emas!')}\r\n                toggleModal={toggleModal}\r\n                body={'approve'}\r\n                approveFunction={handleClickApproveToDelete}\r\n                closeModal={handleClickCancelToDelete}\r\n                isOpen={modalVisible}\r\n            />\r\n            <form className={`sale-deliver-form ${stickyForm && 'stickyForm'}`}>\r\n                <FieldContainer\r\n                    onChange={handleChangePackmanName}\r\n                    value={packmanName}\r\n                    label={t('Agentning ismi')}\r\n                    placeholder={t('misol: Anvar')}\r\n                    maxWidth={'w-[43.75rem]'}\r\n                    type={'string'}\r\n                />\r\n                <div className={'flex gap-[1.25rem] grow items-end'}>\r\n                    <Button\r\n                        add={!stickyForm}\r\n                        edit={stickyForm}\r\n                        text={stickyForm ? t(`Saqlash`) : t('Yangi agent qo`shish')}\r\n                        onClick={stickyForm ? handleEdit : addNewPackman}\r\n                    />\r\n                    <Button text={t('Tozalash')} onClick={clearForm} />\r\n                </div>\r\n            </form>\r\n            <div className='inverterizationHead mainPadding'>\r\n                <div className='inverterizationText'>{t('Agentlar')}</div>\r\n                <div>\r\n                    {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                        <Pagination\r\n                            countPage={Number(showByTotal)}\r\n                            totalDatas={totalSearched || filteredDataTotal}\r\n                            setCurrentPage={setCurrentPage}\r\n                            currentPage={currentPage}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <SearchForm\r\n                filterBy={['total', 'name']}\r\n                filterByTotal={filterByTotal}\r\n                filterByName={filterByName}\r\n                searchByName={searchByName}\r\n                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                    filterByNameWhenPressEnter\r\n                }\r\n            />\r\n\r\n            <div className='tableContainerPadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 ? (\r\n                    <NotFind text={'Agentlar mavjud emas'} />\r\n                ) : (\r\n                    <Table\r\n                        page='packman'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        Delete={handleDeletePackman}\r\n                        Edit={handleEditPackman}\r\n                    />\r\n                )}\r\n            </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Packman\r\n"],"names":["t","useTranslation","dispatch","useDispatch","_useSelector","useSelector","state","packmans","errorPackmans","successAddPackman","successUpdatePackman","successDeletePackman","loading","searchedPackmans","total","totalSearched","headers","styles","filter","title","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","searchedData","setSearchedData","_useState5","_useState6","packmanName","setPackmanName","_useState7","_useState8","currentPackman","setCurrentPackman","_useState9","_useState10","deletedPackman","setDeletedPackman","_useState11","_useState12","modalVisible","setModalVisible","_useState13","_useState14","stickyForm","setStickyForm","_useState15","_useState16","showByTotal","setShowByTotal","_useState17","_useState18","currentPage","setCurrentPage","_useState19","_useState20","filteredDataTotal","setFilteredDataTotal","_useState21","_useState22","searchByName","setSearchByName","toggleModal","handleClickCancelToDelete","clearForm","e","preventDefault","useEffect","universalToast","clearErrorPackmans","successAddPackmanMessage","clearSuccessAddPackmans","successUpdatePackmanMessage","clearSuccessUpdatePackmans","successDeletePackmanMessage","clearSuccessDeletePackmans","body","countPage","search","name","replace","trim","getPackmans","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","UniversalModal","headerText","concat","approveFunction","_id","deletePackman","closeModal","isOpen","className","FieldContainer","onChange","target","value","label","placeholder","maxWidth","type","Button","add","edit","text","onClick","_checkEmptyString2","checkEmptyString","message","failed","warningEmptyInput","market","updatePackman","_checkEmptyString","addPackman","Pagination","Number","totalDatas","SearchForm","filterBy","filterByTotal","_ref","filterByName","val","valForSearch","toLowerCase","length","clearSearchedPackmans","filteredPackmans","packman","includes","filterByCodeAndNameAndCategoryWhenPressEnter","key","getPackmansByFilter","Spinner","NotFind","Table","page","Delete","Edit"],"sourceRoot":""}