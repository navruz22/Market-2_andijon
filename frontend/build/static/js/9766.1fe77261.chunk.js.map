{"version":3,"file":"static/js/9766.1fe77261.chunk.js","mappings":"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","sources":["Pages/Inventories/Inventories.js"],"sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport Table from '../../Components/Table/Table'\r\nimport Pagination from '../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {universalToast} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport SmallLoader from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport {motion} from 'framer-motion'\r\nimport {getConnectors, postInventoriesId} from './inventorieSlice.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {universalSort} from './../../App/globalFunctions'\r\n\r\nfunction Inventories() {\r\n    const {t} = useTranslation(['common'])\r\n    const headers = [\r\n        {styles: 'w-[10%] text-start', title: '№'},\r\n        {styles: 'w-[10%] text-start', filter: 'createdAt', title: t('Sana')},\r\n        {styles: 'w-[10%] text-start', filter: 'id', title: t('ID')},\r\n        {styles: 'text-start', title: t('Maxsulotlar')},\r\n        {styles: 'w-[10%]', title: t('Holati')},\r\n        {styles: 'w-[10%]', title: ' '},\r\n    ]\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        connectors,\r\n        errorConnectors,\r\n        clearErrorConnectors,\r\n        loading,\r\n        dataLoading,\r\n        total,\r\n    } = useSelector((state) => state.inventoryConnectors)\r\n    const [sorItem, setSorItem] = useState({\r\n        filter: '',\r\n        sort: '',\r\n        count: 0,\r\n    })\r\n    const [storeData, setStoreData] = useState(connectors)\r\n    const [data, setData] = useState(connectors)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [startDate, setStartDate] = useState(\r\n        new Date(new Date().getFullYear(), new Date().getMonth(), 1)\r\n    )\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [printedInventories, setPrintedInventories] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n    // filter by total\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n\r\n    // excel function\r\n    const headersInventories = [\r\n        '№',\r\n        t('Sana'),\r\n        t('Kodi'),\r\n        t('Maxsulot'),\r\n        t('Dastlabki'),\r\n        t('Sanoq'),\r\n        t('Farqi'),\r\n        t('Farqi USD'),\r\n        t('Farqi UZS'),\r\n    ]\r\n\r\n    const toggleModal = () => {\r\n        setModalVisible(!modalVisible)\r\n        setPrintedInventories(null)\r\n    }\r\n\r\n    const handleClickPrint = (e) => {\r\n        const body = {\r\n            id: e._id,\r\n        }\r\n        dispatch(postInventoriesId(body)).then(({payload: {inventories}}) => {\r\n            if (inventories.length > 0) {\r\n                setPrintedInventories(inventories)\r\n            }\r\n        })\r\n        setModalVisible(true)\r\n    }\r\n\r\n    const autoFillColumnWidth = (json) => {\r\n        const cols = Object.keys(json[0])\r\n        const maxLength = cols.reduce((acc, curr) => {\r\n            return acc > curr.length ? acc : curr.length\r\n        }, 0)\r\n        return cols.map((col) => ({\r\n            wch: maxLength,\r\n        }))\r\n    }\r\n    const continueHandleClick = useCallback(\r\n        (data) => {\r\n            const wscols = autoFillColumnWidth(data)\r\n            const wb = XLSX.utils.book_new()\r\n            const ws = XLSX.utils.json_to_sheet([])\r\n            ws['!cols'] = wscols\r\n            XLSX.utils.sheet_add_aoa(ws, [headersInventories])\r\n            XLSX.utils.sheet_add_json(ws, data, {\r\n                origin: 'A2',\r\n                skipHeader: true,\r\n            })\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Inventorizatsiyalar')\r\n            XLSX.writeFile(\r\n                wb,\r\n                `${t(\r\n                    'Invertarizatsiyalar'\r\n                )}-${new Date().toLocaleDateString()}.xlsx`\r\n            )\r\n        },\r\n        [headersInventories, t]\r\n    )\r\n\r\n    const handleClick = (e, idx) => {\r\n        const body = {\r\n            id: e._id,\r\n        }\r\n        dispatch(postInventoriesId(body)).then(({payload: {inventories}}) => {\r\n            if (inventories.length > 0) {\r\n                const newData = inventories.map((item, index) => ({\r\n                    nth: index + 1,\r\n                    data: new Date(item?.createdAt).toLocaleDateString(),\r\n                    code: item.productdata.code,\r\n                    name: item.productdata.name,\r\n                    initial: item.productcount,\r\n                    count: item.inventorycount,\r\n                    difference: item.inventorycount - item.productcount,\r\n                    differenceUSD:\r\n                        item.inventorycount * item.price.incomingprice -\r\n                        item.productcount * item.price.incomingprice,\r\n                    differenceUZS:\r\n                        item.inventorycount * item.price.incomingpriceuzs -\r\n                        item.productcount * item.price.incomingpriceuzs,\r\n                }))\r\n                continueHandleClick(newData, idx)\r\n            }\r\n        })\r\n    }\r\n\r\n    const filterData = (filterKey) => {\r\n        if (filterKey === sorItem.filter) {\r\n            switch (sorItem.count) {\r\n                case 1:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '1',\r\n                        count: 2,\r\n                    })\r\n                    universalSort(data, setData, filterKey, 1, storeData)\r\n                    break\r\n                case 2:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '',\r\n                        count: 0,\r\n                    })\r\n                    universalSort(data, setData, filterKey, '', storeData)\r\n                    break\r\n                default:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '-1',\r\n                        count: 1,\r\n                    })\r\n                    universalSort(data, setData, filterKey, -1, storeData)\r\n            }\r\n        } else {\r\n            setSorItem({\r\n                filter: filterKey,\r\n                sort: '-1',\r\n                count: 1,\r\n            })\r\n            universalSort(data, setData, filterKey, -1, storeData)\r\n        }\r\n    }\r\n\r\n    // excel function\r\n\r\n    useEffect(() => {\r\n        setData(connectors)\r\n        setStoreData(connectors)\r\n    }, [connectors])\r\n    useEffect(() => {\r\n        if (errorConnectors) {\r\n            universalToast(errorConnectors, 'error')\r\n            dispatch(clearErrorConnectors())\r\n        }\r\n    }, [dispatch, clearErrorConnectors, errorConnectors])\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            startDate: new Date(\r\n                new Date(startDate).getFullYear(),\r\n                new Date(startDate).getMonth(),\r\n                new Date(startDate).getDate()\r\n            ).toISOString(),\r\n            endDate: endDate.toISOString(),\r\n        }\r\n        dispatch(getConnectors(body))\r\n    }, [currentPage, showByTotal, dispatch, startDate, endDate])\r\n    useEffect(() => {\r\n        setData(connectors)\r\n    }, [connectors])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: {opacity: 1, height: 'auto'},\r\n                collapsed: {opacity: 0, height: 0},\r\n            }}\r\n            transition={{duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98]}}\r\n        >\r\n            <UniversalModal\r\n                printedInventories={printedInventories}\r\n                body={'checkInventory'}\r\n                isOpen={modalVisible}\r\n                toggleModal={toggleModal}\r\n            />\r\n\r\n            {dataLoading && (\r\n                <div className='fixed z-[50] backdrop-blur-[2px] left-0 right-0 bg-white-700 flex flex-col items-center justify-center w-full h-full'>\r\n                    <SmallLoader />\r\n                </div>\r\n            )}\r\n\r\n            <div className='inventoriesHead mainPadding'>\r\n                <div className='font-[400] text-[1.25rem] text-blue-900'>\r\n                    {t('Inventarizatsiyalar')}\r\n                </div>\r\n                <div>\r\n                    {filteredDataTotal !== 0 && (\r\n                        <Pagination\r\n                            countPage={Number(showByTotal)}\r\n                            totalDatas={filteredDataTotal}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <SearchForm\r\n                filterBy={['total', 'startDate', 'endDate']}\r\n                filterByTotal={filterByTotal}\r\n                setEndDate={setEndDate}\r\n                setStartDate={setStartDate}\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n            />\r\n            <div className='tableContainerPadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 ? (\r\n                    <NotFind text={'Invnentarizatsiyalar mavjud emas!'} />\r\n                ) : (\r\n                    <Table\r\n                        isDisabled={dataLoading}\r\n                        page='inventories'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={data}\r\n                        headers={headers}\r\n                        Excel={handleClick}\r\n                        Print={handleClickPrint}\r\n                        Sort={filterData}\r\n                        sortItem={sorItem}\r\n                    />\r\n                )}\r\n            </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Inventories\r\n"],"names":["t","useTranslation","headers","styles","title","filter","dispatch","useDispatch","_useSelector","useSelector","state","inventoryConnectors","connectors","errorConnectors","clearErrorConnectors","loading","dataLoading","total","_useState","useState","sort","count","_useState2","_slicedToArray","sorItem","setSorItem","_useState3","_useState4","storeData","setStoreData","_useState5","_useState6","data","setData","_useState7","_useState8","showByTotal","setShowByTotal","_useState9","_useState10","currentPage","setCurrentPage","_useState11","_useState12","filteredDataTotal","setFilteredDataTotal","_useState13","Date","getFullYear","getMonth","_useState14","startDate","setStartDate","_useState15","_useState16","endDate","setEndDate","_useState17","_useState18","printedInventories","setPrintedInventories","_useState19","_useState20","modalVisible","setModalVisible","headersInventories","continueHandleClick","useCallback","wscols","json","cols","Object","keys","maxLength","reduce","acc","curr","length","map","col","wch","autoFillColumnWidth","wb","XLSX","book_new","ws","json_to_sheet","sheet_add_aoa","sheet_add_json","origin","skipHeader","book_append_sheet","concat","toLocaleDateString","useEffect","universalToast","body","countPage","getDate","toISOString","getConnectors","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","UniversalModal","isOpen","toggleModal","className","SmallLoader","Pagination","Number","totalDatas","SearchForm","filterBy","filterByTotal","_ref","value","Spinner","NotFind","text","Table","isDisabled","page","Excel","e","idx","id","_id","postInventoriesId","then","_ref3","inventories","payload","newData","item","index","nth","createdAt","code","productdata","name","productcount","inventorycount","difference","differenceUSD","price","incomingprice","differenceUZS","incomingpriceuzs","Print","_ref2","Sort","filterKey","universalSort","sortItem"],"sourceRoot":""}